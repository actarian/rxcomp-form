{"version":3,"sources":["src/rxcomp-form.ts","../../src/form/directives/form-abstract-collection.directive.ts","../../src/form/directives/form-array.directive.ts","../../src/form/directives/form-abstract.directive.ts","../../src/form/directives/form-checkbox.directive.ts","../../src/form/directives/form-field.component.ts","../../src/form/directives/form-group.directive.ts","../../src/form/directives/form-input.directive.ts","../../src/form/directives/form-placeholder.directive.ts","../../src/form/directives/form-radio.directive.ts","../../src/form/directives/form-select.directive.ts","../../src/form/directives/form-submit.directive.ts","../../src/form/validators/form-validator.ts","../../src/form/validators/validators.ts","../../src/form/validators/form-email.directive.ts","../../src/form/validators/form-max-length.directive.ts","../../src/form/validators/form-max.directive.ts","../../src/form/validators/form-min-length.directive.ts","../../src/form/validators/form-min.directive.ts","../../src/form/validators/form-pattern.directive.ts","../../src/form/validators/form-required-true.directive.ts","../../src/form/validators/form-required.directive.ts","../../src/form.module.ts","../../src/form/models/form-status.ts","../../src/form/form-abstract.ts","../../src/form/form-control.ts","../../src/form/form-abstract-collection.ts","../../src/form/form-array.ts","../../src/form/form-group.ts"],"names":["g","f","exports","module","require","define","amd","globalThis","self","rxcomp","form","rxjs","operators","this","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","_inheritsLoose","subClass","superClass","create","constructor","_setPrototypeOf","o","p","setPrototypeOf","__proto__","FormAbstractCollectionDirective","_Directive","apply","arguments","onChanges","changes","node","getContext","flags","control","keys","forEach","classList","add","remove","get","Directive","selector","hosts","host","FormArrayDirective","_FormAbstractCollecti","formArray","formArrayName","inputs","FormAbstractDirective","_proto","onInit","_this","fromEvent","pipe","takeUntil","unsubscribe$","subscribe","event","onChange","onBlur","formControlName","name","writeValue","value","touched","setDisabledState","disabled","formControl","FormCheckboxDirective","_FormAbstractDirectiv","setAttribute","removeAttribute","checked","FormFieldComponent","_Component","formField","formFieldName","Component","FormGroupDirective","formGroup","formGroupName","FormInputDirective","FormPlaceholderDirective","placeholder","FormRadioDirective","FormSelectDirective","FormSubmitDirective","_getContext","parentInstance","replace","event$","tap","preventDefault","shareReplay","expression","getAttribute","outputFunction","makeFunction","resolve","FormValidator","validator","params","params$","BehaviorSubject","validate","getValue","set","current","reduce","flag","next","NullValidator","RequiredValidator","required","RequiredTrueValidator","MinValidator","min","parseFloat","isNaN","actual","MaxValidator","max","MinLengthValidator","minlength","requiredLength","actualLength","MaxLengthValidator","maxlength","PatternValidator","pattern","regex","RegExp","charAt","patternToRegEx","test","requiredPattern","toString","actualValue","EmailValidator","email","validators","freeze","FormEmailDirective","addValidators","FormMaxLengthDirective","Number","POSITIVE_INFINITY","FormMaxDirective","FormMinLengthDirective","NEGATIVE_INFINITY","FormMinDirective","FormPatternDirective","FormRequiredTrueDirective","FormRequiredDirective","FormStatus","factories","pipes","FormModule","_Module","Module","declarations","concat","FormStatus$1","FormAbstract","value_","undefined","submitted_","touched_","dirty_","valueSubject","statusSubject","validatorsSubject","ReplaySubject","switchAll","value$","distinctUntilChanged","skip","status$","merge","switchMap","validate$","changes$","map","auditTime","Array","isArray","initSubjects_","switchValidators_","validatorParams","x","validatorParams$","combineLatest","of","initObservables_","_this2","status","Disabled","Hidden","errors_","Invalid","Valid","result$","isObservable","results","assign","reset","Pending","patch","_this$validators","push","replaceValidators","_len","clearValidators","errors","hidden","submitted","untouched","pristine","dirty","pending","enabled","visible","valid","invalid","FormControl","_FormAbstract","call","FormAbstractCollection","controls","changesChildren","initControls_","initControl_","controlOrValue","forEach_","init","switchSubjects_","reduce_","result","changesChildren$","_this3","filter","callback","_this4","all_","any_","_this5","find","removeKey","exhist","_len2","FormArray","Math","splice","insert","indexOf","at","FormGroup","Validators"],"mappings":"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","file":"dist\\umd\\rxcomp-form.min.js","sourcesContent":[null,"import { Directive, Factory, getContext, IFactoryMeta } from 'rxcomp';\r\nimport FormAbstractCollection from '../form-abstract-collection';\r\n\r\n/**\r\n * Abstract class representing a FormAbstractCollectionDirective.\r\n */\r\nexport default class FormAbstractCollectionDirective extends Directive {\r\n\r\n\tget control(): FormAbstractCollection {\r\n\t\t// !!! return null?\r\n\t\treturn {} as FormAbstractCollection;\r\n\t}\r\n\r\n\tonChanges(changes: Factory | Window) {\r\n\t\tconst { node } = getContext(this);\r\n\t\tconst flags = this.control.flags;\r\n\t\tObject.keys(flags).forEach((key: string) => {\r\n\t\t\tflags[key] ? node.classList.add(key) : node.classList.remove(key);\r\n\t\t});\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: '', // no selection, abstract class\r\n\t\thosts: { host: FormAbstractCollectionDirective },\r\n\t};\r\n\r\n}\r\n\r\n","import { IFactoryMeta } from 'rxcomp';\r\nimport FormArray from '../form-array';\r\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\r\n\r\n/**\r\n * FormArrayDirective.\r\n * @example\r\n * <form [formArray]=\"form\" (submit)=\"onSubmit()\" role=\"form\" novalidate autocomplete=\"off\">\r\n * \t...\r\n * </form>\r\n */\r\nexport default class FormArrayDirective extends FormAbstractCollectionDirective {\r\n\r\n\tformArrayName?: string;\r\n\tformArray?: FormArray;\r\n\thost?: FormAbstractCollectionDirective;\r\n\r\n\tget control(): FormArray {\r\n\t\t// console.log('FormArrayDirective', (this.formArrayName ? `formArrayName ${this.formArrayName}` : `formArray ${this.formArray}`));\r\n\t\tif (this.formArray) {\r\n\t\t\treturn this.formArray;\r\n\t\t} else {\r\n\t\t\tif (!this.host) {\r\n\t\t\t\tthrow ('missing form collection');\r\n\t\t\t}\r\n\t\t\t// !!! check instanceof ?\r\n\t\t\treturn this.host.control.get(this.formArrayName) as FormArray;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: '[formArray],[formArrayName]',\r\n\t\tinputs: ['formArray', 'formArrayName'],\r\n\t\thosts: { host: FormAbstractCollectionDirective },\r\n\t};\r\n\r\n}\r\n\r\n","import { Directive, Factory, getContext, IFactoryMeta } from 'rxcomp';\r\nimport { fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport FormAbstract from '../form-abstract';\r\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\r\n\r\n/**\r\n * Abstract class representing a FormAbstractDirective.\r\n */\r\nexport default class FormAbstractDirective extends Directive {\r\n\r\n\tformControlName?: string;\r\n\tformControl?: FormAbstract;\r\n\thost?: FormAbstractCollectionDirective;\r\n\r\n\tget control(): FormAbstract {\r\n\t\tif (this.formControl) {\r\n\t\t\treturn this.formControl;\r\n\t\t} else {\r\n\t\t\tif (!this.host) {\r\n\t\t\t\tthrow ('missing form collection');\r\n\t\t\t}\r\n\t\t\treturn this.host.control.get(this.formControlName);\r\n\t\t}\r\n\t}\r\n\r\n\tonInit() {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\t// this.onChange = this.onChange.bind(this);\r\n\t\t// this.onBlur = this.onBlur.bind(this);\r\n\t\t// this.onFocus = this.onFocus.bind(this);\r\n\t\t// node.addEventListener('input', this.onChange);\r\n\t\t// node.addEventListener('change', this.onChange);\r\n\t\t// node.addEventListener('blur', this.onBlur);\r\n\t\t// node.addEventListener('focus', this.onFocus);\r\n\t\tfromEvent<Event>(node, 'input').pipe(takeUntil(this.unsubscribe$)).subscribe(event => this.onChange(event));\r\n\t\tfromEvent<Event>(node, 'change').pipe(takeUntil(this.unsubscribe$)).subscribe(event => this.onChange(event));\r\n\t\tfromEvent<FocusEvent>(node, 'blur').pipe(takeUntil(this.unsubscribe$)).subscribe(event => this.onBlur(event));\r\n\t\t// fromEvent<FocusEvent>(node, 'focus').pipe(takeUntil(this.unsubscribe$)).subscribe(event => this.onFocus(event));\r\n\t}\r\n\r\n\tonChanges(changes: Factory | Window) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tif (this.formControlName) {\r\n\t\t\tnode.name = this.formControlName;\r\n\t\t}\r\n\t\t/*\r\n\t\t// remove all invalids then\r\n\t\tObject.keys(control.errors).forEach(key => {\r\n\t\t\tnode.classList.add(`invalid-${key}`);\r\n\t\t});\r\n\t\t*/\r\n\t\tconst control = this.control;\r\n\t\tconst flags = control.flags;\r\n\t\tObject.keys(flags).forEach((key: string) => {\r\n\t\t\tflags[key] ? node.classList.add(key) : node.classList.remove(key);\r\n\t\t});\r\n\t\tthis.writeValue(control.value);\r\n\t}\r\n\r\n\twriteValue(value: any) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\t// node.setAttribute('value', value == null ? '' : value);\r\n\t\tnode.value = value == null ? '' : value;\r\n\t}\r\n\r\n\tonChange(event: Event) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tthis.control.value = node.value === '' ? null : node.value;\r\n\t}\r\n\r\n\tonBlur(event: FocusEvent) {\r\n\t\tthis.control.touched = true;\r\n\t}\r\n\r\n\t// onFocus(event) {}\r\n\r\n\tsetDisabledState(disabled: boolean) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tnode.disabled = disabled;\r\n\t\t// node.setAttribute('disabled', disabled);\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: '', // no selection, abstract class\r\n\t\tinputs: ['formControl', 'formControlName', 'value'],\r\n\t\thosts: { host: FormAbstractCollectionDirective },\r\n\t};\r\n\r\n}\r\n\r\n/*\r\n\r\nLEGACY\r\nbutton: \t\tA push button with no default behavior.\r\ncheckbox: \t\tA check box allowing single values to be selected/deselected.\r\nfile: \t\t\tA control that lets the user select a file. Use the accept attribute to define the types of files that the control can select.\r\nhidden: \t\tA control that is not displayed but whose value is submitted to the server.\r\nimage: \t\t\tA graphical submit button. You must use the src attribute to define the source of the image and the alt attribute to define alternative text. You can use the height and width attributes to define the size of the image in pixels.\r\npassword: \t\tA single-line text field whose value is obscured. Use the maxlength and minlength attributes to specify the maximum length of the value that can be entered.\r\n\t\t\t\tNote: Any forms involving sensitive information like passwords (e.g. login forms) should be served over HTTPS;\r\n\t\t\t\tFirefox now implements multiple mechanisms to warn against insecure login forms — see Insecure passwords.\r\n\t\t\t\tOther browsers are also implementing similar mechanisms.\r\n\r\nradio: \t\t\tA radio button, allowing a single value to be selected out of multiple choices.\r\nreset: \t\t\tA button that resets the contents of the form to default values.\r\nsubmit: \t\tA button that submits the form.\r\ntext: \t\t\tA single-line text field. Line-breaks are automatically removed from the input value.\r\n\r\n*/\r\n\r\n/*\r\n\r\nHTML5\r\ncolor: \t\t\t(ie) A control for specifying a color. A color picker's UI has no required features other than accepting simple colors as text (more info).\r\ndate: \t\t\t(ie) A control for entering a date (year, month, and day, with no time).\r\ndatetime-local: (ie) A control for entering a date and time, with no time zone.\r\nemail: \t\t\tA field for editing an e-mail address.\r\nmonth: \t\t\t(ie) A control for entering a month and year, with no time zone.\r\nnumber: \t\tA control for entering a number.\r\nrange: \t\t\tA control for entering a number whose exact value is not important.\r\nsearch: \t\tA single-line text field for entering search strings. Line-breaks are automatically removed from the input value.\r\ntel: \t\t\tA control for entering a telephone number.\r\ntime: \t\t\t(ie) A control for entering a time value with no time zone.\r\nurl: \t\t\tA field for entering a URL.\r\nweek: \t\t\t(ie) A control for entering a date consisting of a week-year number and a week number with no time zone.\r\n\r\n*/\r\n\r\n/*\r\n\r\nATTRIBUTES\r\nautocomplete\tA string indicating the type of autocomplete functionality, if any, to allow on the input\r\nautofocus\t\tA Boolean which, if present, makes the input take focus when the form is presented\r\ndisabled\t\tA Boolean attribute which is present if the input should be disabled\r\nform\t\t\tThe id of the <form> of which the input is a member; if absent, the input is a member of the nearest containing form, or is not a member of a form at all\r\nlist\t\t\tThe id of a <datalist> element that provides a list of suggested values for the input\r\nname\t\t\tThe input's name, to identify the input in the data submitted with the form's data\r\nreadonly\t\tA Boolean attribute which, if true, indicates that the input cannot be edited\r\nrequired\t\tA Boolean which, if true, indicates that the input must have a value before the form can be submitted\r\ntabindex\t\tA numeric value providing guidance to the user agent as to the order in which controls receive focus when the user presses the Tab key\r\ntype\t\t\tA string indicating which input type the <input> element represents\r\nvalue\t\t\tThe input's current value\r\n\r\n*/\r\n","import { getContext, IFactoryMeta } from 'rxcomp';\r\nimport { fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\r\nimport FormAbstractDirective from './form-abstract.directive';\r\n\r\n/**\r\n * FormCheckboxDirective.\r\n * @example\r\n * <input type=\"checkbox\" formControlName=\"privacy\" [value]=\"true\" requiredTrue />\r\n * @example\r\n * <input type=\"checkbox\" [formControl]=\"control\" [value]=\"true\" requiredTrue />\r\n */\r\nexport default class FormCheckboxDirective extends FormAbstractDirective {\r\n\r\n\tvalue?: any;\r\n\r\n\tonInit() {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\t// log(node.getAttributeNode('formControl').value);\r\n\t\t// log('name', node.name);\r\n\t\t// this.onChange = this.onChange.bind(this);\r\n\t\t// this.onBlur = this.onBlur.bind(this);\r\n\t\t// this.onFocus = this.onFocus.bind(this);\r\n\t\t// node.addEventListener('input', this.onChange);\r\n\t\t// node.addEventListener('change', this.onChange);\r\n\t\t// node.addEventListener('blur', this.onBlur);\r\n\t\t// node.addEventListener('focus', this.onFocus);\r\n\t\t// fromEvent<Event>(node, 'input').pipe(takeUntil(this.unsubscribe$)).subscribe(event => this.onChange(event));\r\n\t\tfromEvent<Event>(node, 'change').pipe(takeUntil(this.unsubscribe$)).subscribe(event => this.onChange(event));\r\n\t\tfromEvent<FocusEvent>(node, 'blur').pipe(takeUntil(this.unsubscribe$)).subscribe(event => this.onBlur(event));\r\n\t\t// fromEvent<FocusEvent>(node, 'focus').pipe(takeUntil(this.unsubscribe$)).subscribe(event => this.onFocus(event));\r\n\t}\r\n\r\n\twriteValue(value: any) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tvalue === this.value ? node.setAttribute('checked', value) : node.removeAttribute('checked');\r\n\t\t/*\r\n\t\tconst checked = (node.value === value);\r\n\t\tif (node.checked !== checked) {\r\n\t\t\tnode.checked = checked;\r\n\t\t}\r\n\t\t*/\r\n\t}\r\n\r\n\tsetDisabledState(disabled: boolean) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tnode.disabled = disabled;\r\n\t}\r\n\r\n\tonChange(event: Event) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tthis.control.value = node.checked ? this.value : (this.value === true ? false : null);\r\n\t}\r\n\r\n\tonBlur(event: FocusEvent) {\r\n\t\tthis.control.touched = true;\r\n\t}\r\n\r\n\t// onFocus(event) {}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: 'input[type=checkbox][formControl],input[type=checkbox][formControlName]',\r\n\t\tinputs: ['formControl', 'formControlName', 'value'],\r\n\t\thosts: { host: FormAbstractCollectionDirective },\r\n\t};\r\n\r\n}\r\n\r\n/*\r\n\r\nATTRIBUTES\r\nautocomplete\tA string indicating the type of autocomplete functionality, if any, to allow on the input\r\nautofocus\t\tA Boolean which, if present, makes the input take focus when the form is presented\r\ndisabled\t\tA Boolean attribute which is present if the input should be disabled\r\nform\t\t\tThe id of the <form> of which the input is a member; if absent, the input is a member of the nearest containing form, or is not a member of a form at all\r\nlist\t\t\tThe id of a <datalist> element that provides a list of suggested values for the input\r\nname\t\t\tThe input's name, to identify the input in the data submitted with the form's data\r\nreadonly\t\tA Boolean attribute which, if true, indicates that the input cannot be edited\r\nrequired\t\tA Boolean which, if true, indicates that the input must have a value before the form can be submitted\r\ntabindex\t\tA numeric value providing guidance to the user agent as to the order in which controls receive focus when the user presses the Tab key\r\ntype\t\t\tA string indicating which input type the <input> element represents\r\nvalue\t\t\tThe input's current value\r\n\r\n*/\r\n","import { Component, Factory, getContext, IFactoryMeta } from \"rxcomp\";\r\nimport FormAbstract from \"../form-abstract\";\r\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\r\n\r\n/**\r\n * FormFieldComponent.\r\n * @example\r\n * <div formFieldName=\"firstName\">\r\n *\t<input type=\"text\" [formControl]=\"control\" />\r\n * </div>\r\n */\r\nexport default class FormFieldComponent extends Component {\r\n\r\n\tformFieldName?: string;\r\n\tformField?: FormAbstract;\r\n\thost?: FormAbstractCollectionDirective;\r\n\r\n\tget control(): FormAbstract {\r\n\t\t// console.log('FormFieldComponent', (this.formFieldName ? `formFieldName ${this.formFieldName}` : `formField ${this.formField}`));\r\n\t\tif (this.formField) {\r\n\t\t\treturn this.formField;\r\n\t\t} else {\r\n\t\t\tif (!this.host) {\r\n\t\t\t\tthrow ('missing form collection');\r\n\t\t\t}\r\n\t\t\treturn this.host.control.get(this.formFieldName);\r\n\t\t}\r\n\t}\r\n\r\n\tonChanges(changes: Factory | Window) {\r\n\t\tconst { node } = getContext(this);\r\n\t\tconst flags = this.control.flags;\r\n\t\tObject.keys(flags).forEach((key: string) => {\r\n\t\t\tflags[key] ? node.classList.add(key) : node.classList.remove(key);\r\n\t\t});\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: '[formField],[formFieldName]',\r\n\t\tinputs: ['formField', 'formFieldName'],\r\n\t\thosts: { host: FormAbstractCollectionDirective },\r\n\t};\r\n\r\n}\r\n","import { IFactoryMeta } from 'rxcomp';\r\nimport FormGroup from '../form-group';\r\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\r\n\r\n/**\r\n * FormGroupDirective.\r\n * @example\r\n * <form [formGroup]=\"form\" (submit)=\"onSubmit()\" role=\"form\" novalidate autocomplete=\"off\">\r\n * \t...\r\n * </form>\r\n */\r\nexport default class FormGroupDirective extends FormAbstractCollectionDirective {\r\n\r\n\tformGroupName?: string;\r\n\tformGroup?: FormGroup;\r\n\thost?: FormAbstractCollectionDirective;\r\n\r\n\tget control() {\r\n\t\t// console.log('FormGroupDirective', (this.formGroupName ? `formGroupName ${this.formGroupName}` : `formGroup ${this.formGroup}`));\r\n\t\tif (this.formGroup) {\r\n\t\t\treturn this.formGroup;\r\n\t\t} else {\r\n\t\t\tif (!this.host) {\r\n\t\t\t\tthrow ('missing form collection');\r\n\t\t\t}\r\n\t\t\t// !!! check instanceof ?\r\n\t\t\treturn this.host.control.get(this.formGroupName) as FormGroup;\r\n\t\t}\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: '[formGroup],[formGroupName]',\r\n\t\tinputs: ['formGroup', 'formGroupName'],\r\n\t\thosts: { host: FormAbstractCollectionDirective },\r\n\t};\r\n\r\n}\r\n","import { getContext, IFactoryMeta } from 'rxcomp';\r\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\r\nimport FormAbstractDirective from './form-abstract.directive';\r\n\r\n/**\r\n * FormInputDirective to handle input text FormControl value.\r\n * @example\r\n * <input type=\"text\" formControlName=\"firstName\" />\r\n * @example\r\n * <input type=\"text\" [formControl]=\"form.get('firstName')\" />\r\n */\r\nexport default class FormInputDirective extends FormAbstractDirective {\r\n\r\n\twriteValue(value: any): void {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tnode.value = value == null ? '' : value;\r\n\t}\r\n\r\n\tonChange(event: Event): void {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tthis.control.value = node.value === '' ? null : node.value;\r\n\t}\r\n\r\n\tonBlur(event: FocusEvent): void {\r\n\t\tthis.control.touched = true;\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: 'input[type=text][formControl],input[type=text][formControlName],input[type=email][formControl],input[type=email][formControlName],input[type=password][formControl],input[type=password][formControlName],textarea[formControl],textarea[formControlName]',\r\n\t\tinputs: ['formControl', 'formControlName'],\r\n\t\thosts: { host: FormAbstractCollectionDirective },\r\n\t};\r\n\r\n}\r\n","import { Directive, Factory, getContext, IFactoryMeta } from 'rxcomp';\r\n\r\n/**\r\n * FormPlaceholderDirective.\r\n * @example\r\n * <input type=\"text\" [placeholder]=\"'item-' + index\" />\r\n */\r\nexport default class FormPlaceholderDirective extends Directive {\r\n\r\n\tplaceholder?: string;\r\n\r\n\tonChanges(changes: Factory | Window) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tnode.setAttribute('placeholder', this.placeholder || '');\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: 'input[placeholder],textarea[placeholder]',\r\n\t\tinputs: ['placeholder'],\r\n\t};\r\n\r\n}\r\n","import { getContext, IFactoryMeta } from 'rxcomp';\r\nimport { fromEvent } from 'rxjs';\r\nimport { takeUntil } from 'rxjs/operators';\r\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\r\nimport FormAbstractDirective from './form-abstract.directive';\r\n\r\n/**\r\n * FormRadioDirective.\r\n * @example\r\n * <input type=\"radio\" [formControl]=\"control\" name=\"radioGroup\" value=\"one\" />\r\n * <input type=\"radio\" [formControl]=\"control\" name=\"radioGroup\" value=\"two\" />\r\n * <input type=\"radio\" [formControl]=\"control\" name=\"radioGroup\" value=\"three\" />\r\n */\r\nexport default class FormRadioDirective extends FormAbstractDirective {\r\n\r\n\tonInit() {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\t// log(node.getAttributeNode('formControl').value);\r\n\t\t// log('name', node.name);\r\n\t\t// this.onChange = this.onChange.bind(this);\r\n\t\t// this.onBlur = this.onBlur.bind(this);\r\n\t\t// this.onFocus = this.onFocus.bind(this);\r\n\t\t// node.addEventListener('input', this.onChange);\r\n\t\t// node.addEventListener('change', this.onChange);\r\n\t\t// node.addEventListener('blur', this.onBlur);\r\n\t\t// node.addEventListener('focus', this.onFocus);\r\n\t\t// fromEvent<Event>(node, 'input').pipe(takeUntil(this.unsubscribe$)).subscribe(event => this.onChange(event));\r\n\t\tfromEvent<Event>(node, 'change').pipe(takeUntil(this.unsubscribe$)).subscribe(event => this.onChange(event));\r\n\t\tfromEvent<FocusEvent>(node, 'blur').pipe(takeUntil(this.unsubscribe$)).subscribe(event => this.onBlur(event));\r\n\t\t// fromEvent<FocusEvent>(node, 'focus').pipe(takeUntil(this.unsubscribe$)).subscribe(event => this.onFocus(event));\r\n\t}\r\n\r\n\twriteValue(value: any) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tnode.checked = (node.value === value);\r\n\t}\r\n\r\n\tsetDisabledState(disabled: boolean) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tnode.disabled = disabled;\r\n\t}\r\n\r\n\tonChange(event: Event) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tif (node.checked) {\r\n\t\t\tthis.control.value = node.value;\r\n\t\t}\r\n\t}\r\n\r\n\tonBlur(event: FocusEvent) {\r\n\t\tthis.control.touched = true;\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: 'input[type=radio][formControl],input[type=radio][formControlName]',\r\n\t\tinputs: ['formControl', 'formControlName'],\r\n\t\thosts: { host: FormAbstractCollectionDirective },\r\n\t};\r\n\r\n}\r\n","import { getContext, IFactoryMeta } from 'rxcomp';\r\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\r\nimport FormAbstractDirective from './form-abstract.directive';\r\n\r\n/**\r\n * FormSelectDirective.\r\n * @example\r\n * <select formControlName=\"country\">\r\n * \t<option value=\"\">select</option>\r\n * \t<option value=\"en-US\">English</option>\r\n * \t<option value=\"it-IT\">Italiano</option>\r\n * </select>\r\n * @example\r\n * <select [formControl]=\"control\">\r\n * \t<option value=\"\">select</option>\r\n * \t<option value=\"en-US\">English</option>\r\n * \t<option value=\"it-IT\">Italiano</option>\r\n * </select>\r\n */\r\nexport default class FormSelectDirective extends FormAbstractDirective {\r\n\r\n\twriteValue(value: any) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tnode.value = value == null ? '' : value;\r\n\t}\r\n\r\n\tsetDisabledState(disabled: boolean) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tnode.disabled = disabled;\r\n\t}\r\n\r\n\tonChange(event: Event) {\r\n\t\tconst node = getContext(this).node as HTMLInputElement;\r\n\t\tthis.control.value = node.value === '' ? null : node.value;\r\n\t}\r\n\r\n\tonBlur(event: Event) {\r\n\t\tthis.control.touched = true;\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: 'select[formControl],select[formControlName]',\r\n\t\tinputs: ['formControl', 'formControlName'],\r\n\t\thosts: { host: FormAbstractCollectionDirective },\r\n\t};\r\n}\r\n","import { Directive, getContext, IFactoryMeta } from 'rxcomp';\r\nimport { fromEvent, Observable } from 'rxjs';\r\nimport { shareReplay, takeUntil, tap } from 'rxjs/operators';\r\n\r\n/**\r\n * FormSubmitDirective.\r\n * @example\r\n * <form (submit)=\"onSubmit()\" [formGroup]=\"form\" role=\"form\" novalidate autocomplete=\"off\">\r\n * \t...\r\n * </form>\r\n */\r\nexport default class FormSubmitDirective extends Directive {\r\n\r\n\tevent?: string;\r\n\tevent$?: Observable<Event>;\r\n\r\n\tonInit() {\r\n\t\tconst { module, node, selector, parentInstance } = getContext(this);\r\n\t\tconst event = this.event = selector.replace(/\\[|\\]|\\(|\\)/g, '');\r\n\t\tconst form = node as HTMLFormElement;\r\n\t\tconst event$ = this.event$ = fromEvent(form, 'submit').pipe(\r\n\t\t\ttap(event => {\r\n\t\t\t\tevent.preventDefault();\r\n\t\t\t}),\r\n\t\t\tshareReplay(1)\r\n\t\t);\r\n\t\tconst expression = node.getAttribute(`(${event})`);\r\n\t\tif (expression) {\r\n\t\t\tconst outputFunction = module.makeFunction(expression, ['$event']);\r\n\t\t\tevent$.pipe(\r\n\t\t\t\ttakeUntil(this.unsubscribe$ as Observable<any>) // !!!\r\n\t\t\t).subscribe(event => {\r\n\t\t\t\tmodule.resolve(outputFunction, parentInstance, event);\r\n\t\t\t});\r\n\t\t} else {\r\n\t\t\t(parentInstance as any)[`${event}$`] = event$; // !!! any\r\n\t\t}\r\n\t\t// console.log('parentInstance', parentInstance);\r\n\t\t// console.log('EventDirective.onInit', 'selector', selector, 'event', event);\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: `[(submit)]`,\r\n\t};\r\n\r\n}\r\n","import { BehaviorSubject } from \"rxjs\";\r\n\r\nexport interface IFormValidationError {\r\n\t[key: string]: any\r\n}\r\n\r\n/**\r\n * FormValidator class representing a form validator.\r\n * @example\r\n * export function EqualValidator(equal) {\r\n * \treturn new FormValidator(function(value) {\r\n * \t\tconst equal = this.params.equal;\r\n * \t\tif (!value || !equal) {\r\n * \t\t\treturn null;\r\n * \t\t}\r\n * \t\treturn value !== equal ? { equal: { equal: equal, actual: value } } : null;\r\n * \t}, { equal });\r\n * }\r\n */\r\nexport default class FormValidator {\r\n\r\n\tvalidator: (value: any, params?: any) => null | IFormValidationError;\r\n\tparams$: BehaviorSubject<any>;\r\n\r\n\tget params(): any {\r\n\t\treturn this.params$.getValue();\r\n\t}\r\n\r\n\tset params(params: any) {\r\n\t\tif (params) {\r\n\t\t\tconst current = this.params;\r\n\t\t\tconst differs: boolean = Object.keys(params).reduce((flag: boolean, key: string) => {\r\n\t\t\t\treturn flag || !current || current[key] !== params[key];\r\n\t\t\t}, false);\r\n\t\t\tif (differs) {\r\n\t\t\t\t// if (JSON.stringify(params) !== JSON.stringify(this.params)) {\r\n\t\t\t\tthis.params$.next(params);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * Create a FormValidator.\r\n\t */\r\n\tconstructor(validator: (value: any, params?: any) => any, params?: any) {\r\n\t\tthis.validator = validator;\r\n\t\tthis.params$ = new BehaviorSubject(params);\r\n\t}\r\n\r\n\t/**\r\n\t * validate a value\r\n\t * @param value the value to validate\r\n\t */\r\n\tvalidate(value: any): any {\r\n\t\treturn this.validator(value, this.params);\r\n\t}\r\n\r\n}\r\n","import FormValidator from './form-validator';\r\n\r\n/**\r\n * a null validator\r\n */\r\nexport function NullValidator() {\r\n\treturn new FormValidator(function (value: any, params?: any) {\r\n\t\treturn null;\r\n\t});\r\n}\r\n\r\n/**\r\n * a required validator\r\n */\r\nexport function RequiredValidator(): FormValidator {\r\n\treturn new FormValidator(function (value: any, params?: any) {\r\n\t\t// console.log('RequiredValidator', value, (value == null || value.length === 0) ? { required: true } : null);\r\n\t\treturn (value == null || value.length === 0) ? { required: true } : null;\r\n\t});\r\n\t// return (value == null || value.length === 0) ? 'required' : null;\r\n}\r\n\r\n/**\r\n * a required and true validator\r\n */\r\nexport function RequiredTrueValidator(): FormValidator {\r\n\treturn new FormValidator(function (value: any, params?: any) {\r\n\t\t// console.log('RequiredTrueValidator', value, value === true ? null : { required: true });\r\n\t\treturn value === true ? null : { required: true };\r\n\t});\r\n}\r\n\r\n/**\r\n * a min number value validator\r\n */\r\nexport function MinValidator(min: number): FormValidator {\r\n\treturn new FormValidator(function (value: any, params?: any) {\r\n\t\tconst min = params.min;\r\n\t\tif (!value || !min) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvalue = parseFloat(value);\r\n\t\treturn !isNaN(value) && value < min ? { min: { min: min, actual: value } } : null;\r\n\t}, { min });\r\n}\r\n\r\n/**\r\n * a max number value validator\r\n */\r\nexport function MaxValidator(max: number): FormValidator {\r\n\treturn new FormValidator(function (value: any, params?: any) {\r\n\t\tconst max = params.max;\r\n\t\tif (!value || !max) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tvalue = parseFloat(value);\r\n\t\treturn !isNaN(value) && value > max ? { max: { max: max, actual: value } } : null;\r\n\t}, { max });\r\n}\r\n\r\n/**\r\n * a min string length validator\r\n */\r\nexport function MinLengthValidator(minlength: number): FormValidator {\r\n\treturn new FormValidator(function (value: any, params?: any) {\r\n\t\tconst minlength = params.minlength;\r\n\t\tif (!value || !minlength) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst length = value ? value.length : 0;\r\n\t\treturn length < minlength ? { minlength: { requiredLength: minlength, actualLength: length } } : null;\r\n\t}, { minlength });\r\n}\r\n\r\n/**\r\n * a max string length validator\r\n */\r\nexport function MaxLengthValidator(maxlength: number): FormValidator {\r\n\treturn new FormValidator(function (value: any, params?: any) {\r\n\t\tconst maxlength = params.maxlength;\r\n\t\tif (!value || !maxlength) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst length = value ? value.length : 0;\r\n\t\treturn length > maxlength ? { minlength: { requiredLength: maxlength, actualLength: length } } : null;\r\n\t}, { maxlength });\r\n}\r\n\r\n/**\r\n * a regex pattern validator\r\n */\r\nexport function PatternValidator(pattern: string | RegExp): FormValidator {\r\n\treturn new FormValidator(function (value: any, params?: any) {\r\n\t\tconst pattern = params.pattern;\r\n\t\tif (!value || !pattern) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\tconst regex = patternToRegEx(pattern);\r\n\t\treturn regex.test(value) ? null : { pattern: { requiredPattern: regex.toString(), actualValue: value } };\r\n\t}, { pattern });\r\n}\r\n\r\n/**\r\n * an email pattern validator\r\n */\r\nexport function EmailValidator(): FormValidator {\r\n\tconst regex = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\r\n\treturn new FormValidator(function (value: any, params?: any) {\r\n\t\tif (!value) {\r\n\t\t\treturn null;\r\n\t\t}\r\n\t\treturn regex.test(value) ? null : { email: true };\r\n\t});\r\n}\r\n\r\nfunction patternToRegEx(pattern: string | RegExp): RegExp {\r\n\tlet regex;\r\n\tif (pattern instanceof RegExp) {\r\n\t\tregex = pattern;\r\n\t} else if (typeof pattern === 'string') {\r\n\t\tpattern = pattern.charAt(0) === '^' ? pattern : `^${pattern}`;\r\n\t\tpattern = pattern.charAt(pattern.length - 1) === '$' ? pattern : `${pattern}$`;\r\n\t\tregex = new RegExp(pattern);\r\n\t}\r\n\treturn regex || new RegExp('');\r\n}\r\n","import { Directive, IFactoryMeta } from 'rxcomp';\r\nimport FormAbstractDirective from '../directives/form-abstract.directive';\r\nimport FormValidator from './form-validator';\r\nimport { EmailValidator } from './validators';\r\n\r\n/**\r\n * FormEmailDirective attribute for injecting EmailValidator.\r\n * @example\r\n * <input type=\"text\" formControlName=\"email\" email />\r\n */\r\nexport default class FormEmailDirective extends Directive {\r\n\r\n\tvalidator?: FormValidator;\r\n\thost?: FormAbstractDirective;\r\n\r\n\tonInit() {\r\n\t\t// console.log('FormEmailDirective', this.host.control);\r\n\t\tconst validator = this.validator = EmailValidator();\r\n\t\tif (this.host) {\r\n\t\t\tthis.host.control.addValidators(validator);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: '[email][formControl],[email][formControlName]',\r\n\t\tinputs: ['email'],\r\n\t\thosts: { host: FormAbstractDirective },\r\n\t};\r\n\r\n}\r\n","import { Directive, Factory, IFactoryMeta } from 'rxcomp';\r\nimport FormAbstractDirective from '../directives/form-abstract.directive';\r\nimport FormValidator from './form-validator';\r\nimport { MaxLengthValidator } from './validators';\r\n// import { EmailValidator, MaxLengthValidator, MaxValidator, MaxLengthValidator, MaxValidator, NullValidator, PatternValidator, RequiredTrueValidator, RequiredValidator } from './form/validators/validators';\r\n\r\n/**\r\n * FormMaxLengthDirective attribute for injecting MaxLengthValidator.\r\n * @example\r\n * <input type=\"text\" formControlName=\"card\" maxlength=\"12\" />\r\n */\r\nexport default class FormMaxLengthDirective extends Directive {\r\n\r\n\tvalidator?: FormValidator;\r\n\thost?: FormAbstractDirective;\r\n\tmaxlength: number = Number.POSITIVE_INFINITY;\r\n\r\n\tonInit() {\r\n\t\t// console.log('FormMaxLengthDirective.onInit', this.maxlength);\r\n\t\tthis.validator = MaxLengthValidator(this.maxlength);\r\n\t\tif (this.host) {\r\n\t\t\tthis.host.control.addValidators(this.validator);\r\n\t\t}\r\n\t}\r\n\r\n\tonChanges(changes: Factory | Window) {\r\n\t\t// console.log('FormMaxLengthDirective.onChanges', this.maxlength);\r\n\t\tif (this.validator) {\r\n\t\t\tthis.validator.params = { maxlength: this.maxlength };\r\n\t\t}\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: '[maxlength][formControl],[maxlength][formControlName]',\r\n\t\tinputs: ['maxlength'],\r\n\t\thosts: { host: FormAbstractDirective },\r\n\t};\r\n\r\n}\r\n","import { Directive, Factory, IFactoryMeta } from 'rxcomp';\r\nimport FormAbstractDirective from '../directives/form-abstract.directive';\r\nimport FormValidator from './form-validator';\r\nimport { MaxValidator } from './validators';\r\n\r\n/**\r\n * FormMaxDirective attribute for injecting MaxValidator.\r\n * @example\r\n * <input type=\"number\" formControlName=\"qty\" max=\"12\" />\r\n */\r\nexport default class FormMaxDirective extends Directive {\r\n\r\n\tvalidator?: FormValidator;\r\n\thost?: FormAbstractDirective;\r\n\tmax: number = Number.POSITIVE_INFINITY;\r\n\r\n\tonInit() {\r\n\t\t// console.log('FormMaxDirective.onInit', this.max);\r\n\t\tthis.validator = MaxValidator(this.max);\r\n\t\tif (this.host) {\r\n\t\t\tthis.host.control.addValidators(this.validator);\r\n\t\t}\r\n\t}\r\n\r\n\tonChanges(changes: Factory | Window) {\r\n\t\t// console.log('FormMaxDirective.onChanges', this.max);\r\n\t\tif (this.validator) {\r\n\t\t\tthis.validator.params = { max: this.max };\r\n\t\t}\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: '[max][formControl],[max][formControlName]',\r\n\t\tinputs: ['max'],\r\n\t\thosts: { host: FormAbstractDirective },\r\n\t};\r\n\r\n}\r\n","import { Directive, Factory, IFactoryMeta } from 'rxcomp';\r\nimport FormAbstractDirective from '../directives/form-abstract.directive';\r\nimport FormValidator from './form-validator';\r\nimport { MinLengthValidator } from './validators';\r\n\r\n/**\r\n * FormMinLengthDirective attribute for injecting MinLengthValidator.\r\n * @example\r\n * <input type=\"text\" formControlName=\"card\" minlength=\"12\" />\r\n */\r\nexport default class FormMinLengthDirective extends Directive {\r\n\r\n\tvalidator?: FormValidator;\r\n\thost?: FormAbstractDirective;\r\n\tminlength: number = Number.NEGATIVE_INFINITY;\r\n\r\n\tonInit() {\r\n\t\t// console.log('FormMinLengthDirective.onInit', this.minlength);\r\n\t\tthis.validator = MinLengthValidator(this.minlength);\r\n\t\tif (this.host) {\r\n\t\t\tthis.host.control.addValidators(this.validator);\r\n\t\t}\r\n\t}\r\n\r\n\tonChanges(changes: Factory | Window) {\r\n\t\t// console.log('FormMinLengthDirective.onChanges', this.minlength);\r\n\t\tif (this.validator) {\r\n\t\t\tthis.validator.params = { minlength: this.minlength };\r\n\t\t}\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: '[minlength][formControl],[minlength][formControlName]',\r\n\t\tinputs: ['minlength'],\r\n\t\thosts: { host: FormAbstractDirective },\r\n\t};\r\n\r\n}\r\n","import { Directive, Factory, IFactoryMeta } from 'rxcomp';\r\nimport FormAbstractDirective from '../directives/form-abstract.directive';\r\nimport FormValidator from './form-validator';\r\nimport { MinValidator } from './validators';\r\n\r\n/**\r\n * FormMinDirective attribute for injecting MinValidator.\r\n * @example\r\n * <input type=\"number\" formControlName=\"qty\" min=\"1\" />\r\n */\r\nexport default class FormMinDirective extends Directive {\r\n\r\n\tvalidator?: FormValidator;\r\n\thost?: FormAbstractDirective;\r\n\tmin: number = Number.NEGATIVE_INFINITY;\r\n\r\n\tonInit() {\r\n\t\t// console.log('FormMinDirective.onInit', this.min);\r\n\t\tthis.validator = MinValidator(this.min);\r\n\t\tif (this.host) {\r\n\t\t\tthis.host.control.addValidators(this.validator);\r\n\t\t}\r\n\t}\r\n\r\n\tonChanges(changes: Factory | Window) {\r\n\t\t// console.log('FormMinDirective.onChanges', this.min);\r\n\t\tif (this.validator) {\r\n\t\t\tthis.validator.params = { min: this.min };\r\n\t\t}\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: '[min][formControl],[min][formControlName]',\r\n\t\tinputs: ['min'],\r\n\t\thosts: { host: FormAbstractDirective },\r\n\t};\r\n\r\n}\r\n","import { Directive, Factory, IFactoryMeta } from 'rxcomp';\r\nimport FormAbstractDirective from '../directives/form-abstract.directive';\r\nimport FormValidator from './form-validator';\r\nimport { PatternValidator } from './validators';\r\n\r\n/**\r\n * FormPatternDirective attribute for injecting PatternValidator.\r\n * @example\r\n * <input type=\"text\" formControlName=\"visa\" pattern=\"^4[0-9]{12}(?:[0-9]{3})?$\" />\r\n */\r\nexport default class FormPatternDirective extends Directive {\r\n\r\n\tvalidator?: FormValidator;\r\n\thost?: FormAbstractDirective;\r\n\tpattern?: string | RegExp;\r\n\r\n\tonInit() {\r\n\t\t// console.log('FormPatternDirective.onInit', this.pattern);\r\n\t\tif (this.pattern) {\r\n\t\t\tthis.validator = PatternValidator(this.pattern);\r\n\t\t\tif (this.host) {\r\n\t\t\t\tthis.host.control.addValidators(this.validator);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tonChanges(changes: Factory | Window) {\r\n\t\t// console.log('FormPatternDirective.onChanges', this.pattern);\r\n\t\tif (this.validator) {\r\n\t\t\tthis.validator.params = { pattern: this.pattern };\r\n\t\t}\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: '[pattern][formControl],[pattern][formControlName]',\r\n\t\tinputs: ['pattern'],\r\n\t\thosts: { host: FormAbstractDirective },\r\n\t};\r\n\r\n}\r\n","import { Directive, IFactoryMeta } from 'rxcomp';\r\nimport { FormValidator } from '../../rxcomp-form';\r\nimport FormAbstractDirective from '../directives/form-abstract.directive';\r\nimport { RequiredTrueValidator } from './validators';\r\n\r\n/**\r\n * FormRequiredTrueDirective attribute for injecting RequiredTrueValidator.\r\n * @example\r\n * <input type=\"checkbox\" formControlName=\"privacy\" requiredTrue />\r\n */\r\nexport default class FormRequiredTrueDirective extends Directive {\r\n\r\n\tvalidator?: FormValidator;\r\n\thost?: FormAbstractDirective;\r\n\r\n\tonInit() {\r\n\t\t// console.log('FormRequiredTrueDirective', this.host.control);\r\n\t\tthis.validator = RequiredTrueValidator();\r\n\t\tif (this.host) {\r\n\t\t\tthis.host.control.addValidators(this.validator);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: '[requiredTrue][formControl],[requiredTrue][formControlName]',\r\n\t\tinputs: ['requiredTrue'],\r\n\t\thosts: { host: FormAbstractDirective },\r\n\t};\r\n\r\n}\r\n","import { Directive, IFactoryMeta } from 'rxcomp';\r\nimport { FormValidator } from '../../rxcomp-form';\r\nimport FormAbstractDirective from '../directives/form-abstract.directive';\r\nimport { RequiredValidator } from './validators';\r\n\r\n/**\r\n * FormRequiredDirective attribute for injecting RequiredValidator.\r\n * @example\r\n * <input type=\"text\" formControlName=\"firstName\" required />\r\n */\r\nexport default class FormRequiredDirective extends Directive {\r\n\r\n\tvalidator?: FormValidator;\r\n\thost?: FormAbstractDirective;\r\n\r\n\tonInit() {\r\n\t\t// console.log('FormRequiredDirective', this.host.control);\r\n\t\tthis.validator = RequiredValidator();\r\n\t\tif (this.host) {\r\n\t\t\tthis.host.control.addValidators(this.validator);\r\n\t\t}\r\n\t}\r\n\r\n\tstatic meta: IFactoryMeta = {\r\n\t\tselector: '[required][formControl],[required][formControlName]',\r\n\t\tinputs: ['required'],\r\n\t\thosts: { host: FormAbstractDirective },\r\n\t};\r\n\r\n}\r\n","import { Factory, IModuleMeta, Module, Pipe } from 'rxcomp';\r\nimport FormArrayDirective from './form/directives/form-array.directive';\r\nimport FormCheckboxDirective from './form/directives/form-checkbox.directive';\r\nimport FormFieldComponent from './form/directives/form-field.component';\r\nimport FormGroupDirective from './form/directives/form-group.directive';\r\nimport FormInputDirective from './form/directives/form-input.directive';\r\nimport FormPlaceholderDirective from './form/directives/form-placeholder.directive';\r\nimport FormRadioDirective from './form/directives/form-radio.directive';\r\nimport FormSelectDirective from './form/directives/form-select.directive';\r\nimport FormSubmitDirective from './form/directives/form-submit.directive';\r\nimport FormEmailDirective from './form/validators/form-email.directive';\r\nimport FormMaxLengthDirective from './form/validators/form-max-length.directive';\r\nimport FormMaxDirective from './form/validators/form-max.directive';\r\nimport FormMinLengthDirective from './form/validators/form-min-length.directive';\r\nimport FormMinDirective from './form/validators/form-min.directive';\r\nimport FormPatternDirective from './form/validators/form-pattern.directive';\r\nimport FormRequiredTrueDirective from './form/validators/form-required-true.directive';\r\nimport FormRequiredDirective from './form/validators/form-required.directive';\r\n\r\nconst factories: typeof Factory[] = [\r\n\tFormArrayDirective,\r\n\tFormCheckboxDirective,\r\n\tFormFieldComponent,\r\n\tFormGroupDirective,\r\n\tFormInputDirective,\r\n\tFormPlaceholderDirective,\r\n\tFormRadioDirective,\r\n\tFormSelectDirective,\r\n\tFormSubmitDirective,\r\n\tFormEmailDirective,\r\n\tFormMaxDirective,\r\n\tFormMaxLengthDirective,\r\n\tFormMinDirective,\r\n\tFormMinLengthDirective,\r\n\tFormPatternDirective,\r\n\tFormRequiredDirective,\r\n\tFormRequiredTrueDirective,\r\n];\r\n\r\nconst pipes: typeof Pipe[] = [];\r\n\r\n/**\r\n * FormModule Class.\r\n * @example\r\n * export default class AppModule extends Module {}\r\n *\r\n * AppModule.meta = {\r\n *  imports: [\r\n *   CoreModule,\r\n *   FormModule\r\n *  ],\r\n *  declarations: [\r\n *   ErrorsComponent\r\n *  ],\r\n *  bootstrap: AppComponent,\r\n * };\r\n * @extends Module\r\n */\r\nexport default class FormModule extends Module {\r\n\r\n\tstatic meta: IModuleMeta = {\r\n\t\tdeclarations: [\r\n\t\t\t...factories,\r\n\t\t\t...pipes,\r\n\t\t],\r\n\t\texports: [\r\n\t\t\t...factories,\r\n\t\t\t...pipes,\r\n\t\t]\r\n\t};\r\n\r\n}\r\n","enum FormStatus {\r\n\tPending = 'pending',\r\n\tValid = 'valid',\r\n\tInvalid = 'invalid',\r\n\tDisabled = 'disabled',\r\n\tHidden = 'hidden',\r\n};\r\n\r\nexport default FormStatus;\r\n","import { BehaviorSubject, combineLatest, isObservable, merge, Observable, of, ReplaySubject } from \"rxjs\";\r\nimport { auditTime, distinctUntilChanged, map, shareReplay, skip, switchAll, switchMap, tap } from 'rxjs/operators';\r\nimport FormStatus from './models/form-status';\r\nimport FormValidator from \"./validators/form-validator\";\r\n\r\n/**\r\n * Abstract class representing a form control.\r\n */\r\nexport default abstract class FormAbstract {\r\n\r\n\tprivate errors_: any;\r\n\tget errors(): { [key: string]: any } {\r\n\t\treturn this.errors_;\r\n\t}\r\n\tset errors(errors: { [key: string]: any }) {\r\n\t\tthis.errors_ = errors;\r\n\t}\r\n\r\n\tname?: string;\r\n\tvalue_: any = undefined;\r\n\tsubmitted_: boolean = false;\r\n\ttouched_: boolean = false;\r\n\tdirty_: boolean = false;\r\n\tstatus?: FormStatus;\r\n\r\n\tvalidators: FormValidator[];\r\n\r\n\tprotected valueSubject: BehaviorSubject<any> = new BehaviorSubject(null);\r\n\tprotected statusSubject: BehaviorSubject<null> = new BehaviorSubject(null);\r\n\tprotected validatorsSubject: ReplaySubject<Observable<any[]>> = new ReplaySubject<Observable<any[]>>().pipe(\r\n\t\tswitchAll()\r\n\t) as ReplaySubject<Observable<any[]>>;\r\n\tpublic value$: Observable<any> = this.valueSubject.pipe(\r\n\t\tdistinctUntilChanged(),\r\n\t\tskip(1),\r\n\t\ttap(() => {\r\n\t\t\tthis.submitted_ = false;\r\n\t\t\tthis.dirty_ = true;\r\n\t\t\tthis.statusSubject.next(null);\r\n\t\t}),\r\n\t\tshareReplay(1)\r\n\t);\r\n\tpublic status$: Observable<{ [key: string]: any }> = merge(this.statusSubject, this.validatorsSubject).pipe(\r\n\t\t// auditTime(1),\r\n\t\tswitchMap(() => this.validate$(this.value)),\r\n\t\tshareReplay(1)\r\n\t);\r\n\tpublic changes$: Observable<any> = merge(this.value$, this.status$).pipe(\r\n\t\tmap(() => this.value),\r\n\t\tauditTime(1),\r\n\t\tshareReplay(1)\r\n\t);\r\n\r\n\t/**\r\n\t * Create a FormAbstract.\r\n\t * @param validators a list of validators.\r\n\t */\r\n\tconstructor(validators?: (FormValidator | FormValidator[])) {\r\n\t\tthis.validators = validators ? (Array.isArray(validators) ? validators : [validators]) : [];\r\n\t}\r\n\r\n\t/**\r\n\t * initialize subjects\r\n\t */\r\n\tprotected initSubjects_(): void {\r\n\t\tthis.switchValidators_();\r\n\t}\r\n\r\n\tprivate switchValidators_(): void {\r\n\t\tconst validatorParams: Observable<any>[] = this.validators.map(x => x.params$);\r\n\t\tlet validatorParams$: Observable<any> = validatorParams.length ? combineLatest(validatorParams) : of(validatorParams);\r\n\t\tthis.validatorsSubject.next(validatorParams$);\r\n\t}\r\n\r\n\t/**\r\n\t * initialize observables\r\n\t */\r\n\tprotected initObservables_(): void { }\r\n\r\n\t/**\r\n\t * @param value the inner control value\r\n\t * @return an object with key, value errors\r\n\t */\r\n\tvalidate$(value: any): Observable<{ [key: string]: any }> {\r\n\t\tif (this.status === FormStatus.Disabled || this.status === FormStatus.Hidden || this.submitted_ || !this.validators.length) {\r\n\t\t\tthis.errors_ = {};\r\n\t\t\tif (this.status === FormStatus.Invalid) {\r\n\t\t\t\tthis.status = FormStatus.Valid;\r\n\t\t\t}\r\n\t\t\treturn of(this.errors_);\r\n\t\t} else {\r\n\t\t\treturn combineLatest(this.validators.map(x => {\r\n\t\t\t\tlet result$ = x.validate(value);\r\n\t\t\t\treturn isObservable(result$) ? result$ : of(result$);\r\n\t\t\t})).pipe(\r\n\t\t\t\tmap(results => {\r\n\t\t\t\t\tthis.errors_ = Object.assign({}, ...results);\r\n\t\t\t\t\tthis.status = Object.keys(this.errors_).length === 0 ? FormStatus.Valid : FormStatus.Invalid;\r\n\t\t\t\t\treturn this.errors_;\r\n\t\t\t\t})\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @return the pending status\r\n\t */\r\n\tget pending(): boolean { return this.status === FormStatus.Pending; }\r\n\r\n\t/**\r\n\t * @return the valid status\r\n\t */\r\n\tget valid(): boolean { return this.status !== FormStatus.Invalid; }\r\n\r\n\t/**\r\n\t * @return the invalid status\r\n\t */\r\n\tget invalid(): boolean { return this.status === FormStatus.Invalid; }\r\n\r\n\t/**\r\n\t * @return the disabled status\r\n\t */\r\n\tget disabled(): boolean { return this.status === FormStatus.Disabled; }\r\n\r\n\t/**\r\n\t * @return the enabled status\r\n\t */\r\n\tget enabled(): boolean { return this.status !== FormStatus.Disabled; }\r\n\r\n\t/**\r\n\t * @return the hidden status\r\n\t */\r\n\tget hidden(): boolean { return this.status === FormStatus.Hidden; }\r\n\r\n\t/**\r\n\t * @return the visible status\r\n\t */\r\n\tget visible(): boolean { return this.status !== FormStatus.Hidden; }\r\n\r\n\t/**\r\n\t * @return the submitted status\r\n\t */\r\n\tget submitted(): boolean { return this.submitted_; }\r\n\r\n\t/**\r\n\t * @return the dirty status\r\n\t */\r\n\tget dirty(): boolean { return this.dirty_; }\r\n\r\n\t/**\r\n\t * @return the pristine status\r\n\t */\r\n\tget pristine(): boolean { return !this.dirty_; }\r\n\r\n\t/**\r\n\t * @return the touched status\r\n\t */\r\n\tget touched(): boolean { return this.touched_; }\r\n\r\n\t/**\r\n\t * @return the untouched status\r\n\t */\r\n\tget untouched(): boolean { return !this.touched_; }\r\n\r\n\t/**\r\n\t * @param disabled the disabled state\r\n\t */\r\n\tset disabled(disabled: boolean) {\r\n\t\tif (disabled) {\r\n\t\t\tif (this.status !== FormStatus.Disabled) {\r\n\t\t\t\tthis.status = FormStatus.Disabled;\r\n\t\t\t\t// this.value_ = null;\r\n\t\t\t\tthis.dirty_ = false;\r\n\t\t\t\tthis.touched_ = false;\r\n\t\t\t\tthis.submitted_ = false;\r\n\t\t\t\tthis.statusSubject.next(null);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this.status === FormStatus.Disabled) {\r\n\t\t\t\tthis.status = FormStatus.Pending;\r\n\t\t\t\t// this.value_ = null;\r\n\t\t\t\tthis.dirty_ = false;\r\n\t\t\t\tthis.touched_ = false;\r\n\t\t\t\tthis.submitted_ = false;\r\n\t\t\t\tthis.statusSubject.next(null);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\tget flags(): { [key: string]: boolean } {\r\n\t\treturn {\r\n\t\t\tuntouched: this.untouched,\r\n\t\t\ttouched: this.touched,\r\n\t\t\tpristine: this.pristine,\r\n\t\t\tdirty: this.dirty,\r\n\t\t\tpending: this.pending,\r\n\t\t\tenabled: this.enabled,\r\n\t\t\tdisabled: this.disabled,\r\n\t\t\thidden: this.hidden,\r\n\t\t\tvisible: this.visible,\r\n\t\t\tvalid: this.valid,\r\n\t\t\tinvalid: this.invalid,\r\n\t\t\tsubmitted: this.submitted\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param hidden the hidden state\r\n\t */\r\n\tset hidden(hidden: boolean) {\r\n\t\tif (hidden) {\r\n\t\t\tif (this.status !== FormStatus.Hidden) {\r\n\t\t\t\tthis.status = FormStatus.Hidden;\r\n\t\t\t\t// this.value_ = null;\r\n\t\t\t\tthis.dirty_ = false;\r\n\t\t\t\tthis.touched_ = false;\r\n\t\t\t\tthis.submitted_ = false;\r\n\t\t\t\tthis.statusSubject.next(null);\r\n\t\t\t}\r\n\t\t} else {\r\n\t\t\tif (this.status === FormStatus.Hidden) {\r\n\t\t\t\tthis.status = FormStatus.Pending;\r\n\t\t\t\t// this.value_ = null;\r\n\t\t\t\tthis.dirty_ = false;\r\n\t\t\t\tthis.touched_ = false;\r\n\t\t\t\tthis.submitted_ = false;\r\n\t\t\t\tthis.statusSubject.next(null);\r\n\t\t\t}\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * @param submitted the submitted state\r\n\t */\r\n\tset submitted(submitted: boolean) {\r\n\t\tthis.submitted_ = submitted;\r\n\t\tthis.statusSubject.next(null);\r\n\t}\r\n\r\n\t/**\r\n\t * @param touched the touched state\r\n\t */\r\n\tset touched(touched: boolean) {\r\n\t\tthis.touched_ = touched;\r\n\t\tthis.statusSubject.next(null);\r\n\t}\r\n\r\n\t/**\r\n\t * @return inner value of the control\r\n\t */\r\n\tget value(): any { return this.value_; }\r\n\r\n\t/**\r\n\t * @param value a value\r\n\t */\r\n\tset value(value: any) {\r\n\t\tthis.value_ = value;\r\n\t\tthis.valueSubject.next(value);\r\n\t}\r\n\r\n\t/**\r\n\t * @param status optional FormStatus\r\n\t */\r\n\treset(status?: FormStatus): void {\r\n\t\tthis.status = status || FormStatus.Pending;\r\n\t\tthis.value_ = null;\r\n\t\tthis.dirty_ = false;\r\n\t\tthis.touched_ = false;\r\n\t\tthis.submitted_ = false;\r\n\t\tthis.statusSubject.next(null);\r\n\t}\r\n\r\n\t/**\r\n\t * @param value a value\r\n\t */\r\n\tpatch(value: any): void {\r\n\t\tthis.value_ = value;\r\n\t\tthis.dirty_ = true;\r\n\t\tthis.submitted_ = false;\r\n\t\tthis.statusSubject.next(null);\r\n\t}\r\n\r\n\t/**\r\n\t * adds one or more FormValidator.\r\n\t * @param validators a list of validators.\r\n\t */\r\n\taddValidators(...validators: FormValidator[]): void {\r\n\t\tthis.validators.push(...validators);\r\n\t\tthis.switchValidators_();\r\n\t}\r\n\r\n\t/**\r\n\t * replace one or more FormValidator.\r\n\t * @param validators a list of validators.\r\n\t */\r\n\treplaceValidators(...validators: FormValidator[]): void {\r\n\t\tthis.validators = validators;\r\n\t\tthis.switchValidators_();\r\n\t}\r\n\r\n\t/**\r\n\t * remove all FormValidator.\r\n\t */\r\n\tclearValidators(): void {\r\n\t\tthis.validators = [];\r\n\t\tthis.switchValidators_();\r\n\t}\r\n\r\n}\r\n","import FormAbstract from \"./form-abstract\";\r\nimport FormStatus from './models/form-status';\r\nimport FormValidator from \"./validators/form-validator\";\r\n\r\n/**\r\n * Class representing a FormControl.\r\n */\r\nexport default class FormControl extends FormAbstract {\r\n\r\n\t/**\r\n\t * Create a FormControl.\r\n\t * @example\r\n\t * const form = new FormControl(null);\r\n\t *\r\n\t * form.changes$.subscribe(changes => {\r\n\t * \tconsole.log(changes);\r\n\t * });\r\n\t * @param value The value of the control.\r\n\t * @param validators a list of validators.\r\n\t */\r\n\tconstructor(value: any = null, validators?: FormValidator | FormValidator[]) {\r\n\t\tsuper(validators);\r\n\t\tthis.value_ = value;\r\n\t\tthis.status = FormStatus.Pending;\r\n\t\tthis.errors = {};\r\n\t\tthis.initSubjects_();\r\n\t\tthis.initObservables_();\r\n\t\tthis.statusSubject.next(null);\r\n\t}\r\n\r\n}\r\n\r\n/** Shortcut for new FormControl. */\r\nexport function formControl(value: any = null, validators?: FormValidator | FormValidator[]) {\r\n\treturn new FormControl(value, validators);\r\n}\r\n","import { BehaviorSubject, combineLatest, Observable, of } from 'rxjs';\r\nimport { map, shareReplay, switchAll } from 'rxjs/operators';\r\nimport FormAbstract from './form-abstract';\r\nimport FormControl from './form-control';\r\nimport FormStatus from './models/form-status';\r\nimport FormValidator from './validators/form-validator';\r\n\r\n/**\r\n * Abstract class representing a form collection.\r\n */\r\nexport default class FormAbstractCollection extends FormAbstract {\r\n\r\n\tcontrols: any;\r\n\tchangesChildren: BehaviorSubject<any> = new BehaviorSubject<any>(undefined);\r\n\r\n\t/**\r\n\t * Create a FormAbstract.\r\n\t * @param controls an object containing controls.\r\n\t * @param validators a list of validators.\r\n\t */\r\n\tconstructor(controls?: any, validators?: (FormValidator | FormValidator[])) {\r\n\t\tsuper(validators);\r\n\t\tthis.controls = controls;\r\n\t\tthis.initControls_();\r\n\t\tthis.initSubjects_();\r\n\t\tthis.initObservables_();\r\n\t}\r\n\r\n\tinitControl_(controlOrValue: FormAbstract | any, key: any): FormControl {\r\n\t\tconst control: FormControl = controlOrValue instanceof FormAbstract ? controlOrValue : new FormControl(controlOrValue);\r\n\t\tcontrol.addValidators(...this.validators);\r\n\t\tcontrol.name = key;\r\n\t\treturn control;\r\n\t}\r\n\r\n\tprivate initControls_(): { [key: string]: FormControl } {\r\n\t\tthis.forEach_((control: FormAbstract, key: any) => {\r\n\t\t\tthis.init(control, key);\r\n\t\t});\r\n\t\treturn this.controls;\r\n\t}\r\n\r\n\tprotected initSubjects_(): void {\r\n\t\tthis.changesChildren = this.changesChildren.pipe(\r\n\t\t\tswitchAll()\r\n\t\t) as BehaviorSubject<Observable<any>>;\r\n\t\tthis.switchSubjects_();\r\n\t}\r\n\r\n\tprotected switchSubjects_(): void {\r\n\t\tconst changesChildren = this.reduce_((result: Observable<any>[], control: FormAbstract) => {\r\n\t\t\tresult.push(control.changes$);\r\n\t\t\treturn result;\r\n\t\t}, []);\r\n\t\tlet changesChildren$ = changesChildren.length ? combineLatest(changesChildren) : of(changesChildren);\r\n\t\tthis.changesChildren.next(changesChildren$);\r\n\t}\r\n\r\n\tprotected initObservables_(): void {\r\n\t\tthis.changes$ = this.changesChildren.pipe(\r\n\t\t\tmap(() => this.value),\r\n\t\t\tshareReplay(1)\r\n\t\t);\r\n\t}\r\n\r\n\tvalidate(value: any): any[] {\r\n\t\tlet errors;\r\n\t\tif (this.status === FormStatus.Disabled || this.status === FormStatus.Hidden) {\r\n\t\t\t// this.errors = {};\r\n\t\t\terrors = [];\r\n\t\t} else {\r\n\t\t\t// this.errors = Object.assign({}, ...this.validators.map(x => x(value)));\r\n\t\t\t// this.status = Object.keys(this.errors).length === 0 ? FormStatus.Valid : FormStatus.Invalid;\r\n\t\t\tlet errors_ = this.validators.map(x => x.validate(value)).filter(x => x !== null);\r\n\t\t\terrors = this.reduce_((result: any[], control: FormAbstract) => {\r\n\t\t\t\treturn result.concat(control.errors);\r\n\t\t\t}, errors_);\r\n\t\t\tthis.status = errors.length === 0 ? FormStatus.Valid : FormStatus.Invalid;\r\n\t\t}\r\n\t\treturn errors;\r\n\t}\r\n\r\n\tprotected forEach_(callback: Function): void {\r\n\t\tObject.keys(this.controls).forEach(key => callback(this.controls[key], key));\r\n\t}\r\n\r\n\tprotected reduce_(callback: Function, result: any): any {\r\n\t\tthis.forEach_((control: FormAbstract, key: any) => {\r\n\t\t\tresult = callback(result, control, key);\r\n\t\t});\r\n\t\treturn result;\r\n\t}\r\n\r\n\tprotected all_(key: (keyof FormAbstract), value: any): boolean {\r\n\t\treturn this.reduce_((result: boolean, control: FormAbstract) => {\r\n\t\t\treturn result && control[key] === value;\r\n\t\t}, true);\r\n\t}\r\n\r\n\tprotected any_(key: (keyof FormAbstract), value: any): boolean {\r\n\t\treturn this.reduce_((result: boolean, control: FormAbstract) => {\r\n\t\t\treturn result || control[key] === value;\r\n\t\t}, false);\r\n\t}\r\n\r\n\tget valid(): boolean { return this.all_('valid', true); }\r\n\tget invalid(): boolean { return this.any_('invalid', true); }\r\n\tget pending(): boolean { return this.any_('pending', true); }\r\n\tget disabled(): boolean { return this.all_('disabled', true); }\r\n\tget enabled(): boolean { return this.any_('enabled', true); }\r\n\tget hidden(): boolean { return this.all_('hidden', true); }\r\n\tget visible(): boolean { return this.any_('visible', true); }\r\n\tget submitted(): boolean { return this.all_('submitted', true); }\r\n\tget dirty(): boolean { return this.any_('dirty', true); }\r\n\tget pristine(): boolean { return this.all_('pristine', true); }\r\n\tget touched(): boolean { return this.all_('touched', true); }\r\n\tget untouched(): boolean { return this.any_('untouched', true); }\r\n\r\n\tset disabled(disabled: boolean) {\r\n\t\tthis.forEach_((control: FormAbstract) => {\r\n\t\t\tcontrol.disabled = disabled;\r\n\t\t});\r\n\t}\r\n\r\n\tset hidden(hidden: boolean) {\r\n\t\tthis.forEach_((control: FormAbstract) => {\r\n\t\t\tcontrol.hidden = hidden;\r\n\t\t});\r\n\t}\r\n\r\n\tset submitted(submitted: boolean) {\r\n\t\tthis.forEach_((control: FormAbstract) => {\r\n\t\t\tcontrol.submitted = submitted;\r\n\t\t});\r\n\t}\r\n\r\n\tset touched(touched: boolean) {\r\n\t\tthis.forEach_((control: FormAbstract) => {\r\n\t\t\tcontrol.touched = touched;\r\n\t\t});\r\n\t}\r\n\r\n\tget value(): { [key: string]: any } {\r\n\t\treturn this.reduce_((result: { [key: string]: any }, control: FormAbstract, key: string) => {\r\n\t\t\tresult[key] = control.value;\r\n\t\t\treturn result;\r\n\t\t}, {});\r\n\t}\r\n\r\n\tset value(value: { [key: string]: any }) {\r\n\t\tthis.forEach_((control: FormAbstract, key: string) => {\r\n\t\t\tcontrol.value = value[key];\r\n\t\t});\r\n\t}\r\n\r\n\tget errors(): { [key: string]: any } {\r\n\t\treturn this.reduce_((result: { [key: string]: any }, control: FormAbstract) => {\r\n\t\t\treturn Object.assign(result, control.errors);\r\n\t\t}, {});\r\n\t}\r\n\tset errors(errors: { [key: string]: any }) { }\r\n\r\n\treset(): void {\r\n\t\tthis.forEach_((control: FormAbstract) => control.reset());\r\n\t}\r\n\r\n\tpatch(value: { [key: string]: any }): void {\r\n\t\tif (value) {\r\n\t\t\tthis.forEach_((control: FormAbstract, key: string) => {\r\n\t\t\t\tif (value[key] != undefined) { // !!! keep != loose inequality\r\n\t\t\t\t\tcontrol.patch(value[key]);\r\n\t\t\t\t}\r\n\t\t\t});\r\n\t\t}\r\n\t}\r\n\r\n\tprotected init(control: FormAbstract, key: any): void {\r\n\t\tthis.controls[key] = this.initControl_(control, key);\r\n\t}\r\n\r\n\tget(key: any): FormAbstract {\r\n\t\treturn this.controls[key];\r\n\t}\r\n\r\n\tset(control: FormAbstract, key: any): void {\r\n\t\tdelete (this.controls[key]);\r\n\t\tthis.controls[key] = this.initControl_(control, key);\r\n\t\tthis.switchSubjects_();\r\n\t}\r\n\r\n\t// !!! needed?\r\n\tadd(control: FormAbstract, key: any): void {\r\n\t\tthis.controls[key] = this.initControl_(control, key);\r\n\t\tthis.switchSubjects_();\r\n\t}\r\n\r\n\tremove(control: FormAbstract): void {\r\n\t\tconst key = Object.keys(this.controls).find((key: string) => this.controls[key] === control ? key : null);\r\n\t\tif (key) {\r\n\t\t\tthis.removeKey(key);\r\n\t\t}\r\n\t}\r\n\r\n\tremoveKey(key: any): void {\r\n\t\tconst exhist: boolean = this.controls[key] !== undefined;\r\n\t\tdelete (this.controls[key]);\r\n\t\tif (exhist) {\r\n\t\t\tthis.switchSubjects_();\r\n\t\t}\r\n\t}\r\n\r\n\t/**\r\n\t * adds one or more FormValidator.\r\n\t * @param validators a list of validators.\r\n\t */\r\n\taddValidators(...validators: FormValidator[]): void {\r\n\t\tthis.forEach_((control: FormAbstract) => control.addValidators(...validators));\r\n\t}\r\n\r\n\t/**\r\n\t * replace one or more FormValidator.\r\n\t * @param validators a list of validators.\r\n\t */\r\n\treplaceValidators(...validators: FormValidator[]): void {\r\n\t\tthis.forEach_((control: FormAbstract) => control.replaceValidators(...validators));\r\n\t}\r\n\r\n\t/**\r\n\t * remove all FormValidator.\r\n\t */\r\n\tclearValidators(): void {\r\n\t\tthis.forEach_((control: FormAbstract) => control.clearValidators());\r\n\t}\r\n\r\n}\r\n","import FormAbstract from './form-abstract';\r\nimport FormAbstractCollection from './form-abstract-collection';\r\nimport FormValidator from './validators/form-validator';\r\n\r\n/**\r\n * Class representing a FormArray.\r\n */\r\nexport default class FormArray extends FormAbstractCollection {\r\n\r\n\t/**\r\n\t * Create a FormArray.\r\n\t * @example\r\n\t * const form = new FormArray([null, null, null]);\r\n\t *\r\n\t * form.changes$.subscribe(changes => {\r\n\t * \tconsole.log(changes);\r\n\t * });\r\n\t * @param controls an array containing controls.\r\n\t * @param validators a list of validators.\r\n\t */\r\n\tconstructor(controls: (FormAbstract | any)[] = [], validators?: (FormValidator | FormValidator[])) {\r\n\t\tsuper(controls, validators);\r\n\t}\r\n\r\n\tforEach_(callback: (control: FormAbstract, key: number) => any) {\r\n\t\tthis.controls.forEach((control: FormAbstract, key: number) => callback(control, key));\r\n\t}\r\n\r\n\tget value(): any[] {\r\n\t\treturn this.reduce_((result: any[], control: FormAbstract, key: number) => {\r\n\t\t\tresult[key] = control.value;\r\n\t\t\treturn result;\r\n\t\t}, []); // init as array\r\n\t}\r\n\r\n\tget length(): number {\r\n\t\treturn this.controls.length;\r\n\t}\r\n\r\n\tprotected init(control: FormAbstract, key: number): void {\r\n\t\tthis.controls.length = Math.max(this.controls.length, key);\r\n\t\tthis.controls[key] = this.initControl_(control, key);\r\n\t}\r\n\r\n\tset(control: FormAbstract, key: number): void {\r\n\t\t// this.controls.length = Math.max(this.controls.length, key);\r\n\t\t// this.controls[key] = this.initControl_(control);\r\n\t\tthis.controls.splice(key, 1, this.initControl_(control, key));\r\n\t\tthis.switchSubjects_();\r\n\t}\r\n\r\n\tadd(control: FormAbstract, key: number): void {\r\n\t\tthis.controls.length = Math.max(this.controls.length, key);\r\n\t\tthis.controls[key] = this.initControl_(control, key);\r\n\t\tthis.switchSubjects_();\r\n\t}\r\n\r\n\tpush(control: FormAbstract): void {\r\n\t\t// this.controls.length = Math.max(this.controls.length, key);\r\n\t\t// this.controls[key] = this.initControl_(control);\r\n\t\tthis.controls.push(this.initControl_(control, this.controls.length));\r\n\t\tthis.switchSubjects_();\r\n\t}\r\n\r\n\tinsert(control: FormAbstract, key: number): void {\r\n\t\tthis.controls.splice(key, 0, this.initControl_(control, key));\r\n\t\tthis.switchSubjects_();\r\n\t}\r\n\r\n\tremove(control: FormAbstract): void {\r\n\t\tconst key: number = this.controls.indexOf(control);\r\n\t\tif (key !== -1) {\r\n\t\t\tthis.removeKey(key);\r\n\t\t}\r\n\t}\r\n\r\n\tremoveKey(key: number): void {\r\n\t\tif (this.controls.length > key) {\r\n\t\t\tthis.controls.splice(key, 1);\r\n\t\t\tthis.switchSubjects_();\r\n\t\t}\r\n\t}\r\n\r\n\tat(key: number) {\r\n\t\treturn this.controls[key];\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Shortcut for new FormArray\r\n */\r\nexport function formArray(controls: (FormAbstract | any)[] = [], validators?: FormValidator | FormValidator[]) {\r\n\treturn new FormArray(controls, validators);\r\n}\r\n","import FormAbstract from './form-abstract';\r\nimport FormAbstractCollection from './form-abstract-collection';\r\nimport FormValidator from './validators/form-validator';\r\n\r\n/**\r\n * Class representing a FormGroup.\r\n */\r\nexport default class FormGroup extends FormAbstractCollection {\r\n\r\n\t/**\r\n\t * Create a FormControl.\r\n\t * @example\r\n\t * const form = new FormGroup({\r\n\t * \tfirstName: null,\r\n\t *  lastName: null,\r\n\t * });\r\n\t *\r\n\t * form.changes$.subscribe(changes => {\r\n\t * \tconsole.log(changes);\r\n\t * });\r\n\t * @param controls an object containing controls.\r\n\t * @param validators a list of validators.\r\n\t */\r\n\tconstructor(controls: { [key: string]: FormAbstract | any } = {}, validators?: FormValidator | FormValidator[]) {\r\n\t\tsuper(controls, validators);\r\n\t}\r\n\r\n}\r\n\r\n/**\r\n * Shortcut for new FormGroup\r\n */\r\nexport function formGroup(controls: { [key: string]: FormAbstract | any } = {}, validators?: FormValidator | FormValidator[]) {\r\n\treturn new FormGroup(controls, validators);\r\n}\r\n"]}