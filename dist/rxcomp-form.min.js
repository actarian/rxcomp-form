/**
 * @license rxcomp-form v1.0.0-alpha.11
 * (c) 2019 Luca Zampetti <lzampetti@gmail.com>
 * License: MIT
 */
! function(t, e) { "object" == typeof exports && "undefined" != typeof module ? e(exports, require("rxcomp"), require("rxjs/operators"), require("rxjs")) : "function" == typeof define && define.amd ? define("rxcomp-form", ["exports", "rxcomp", "rxjs/operators", "rxjs"], e) : e((t = t || self)["rxcomp-form"] = {}, t.rxcomp, t.rxjs.operators, t.rxjs) }(this, (function(t, e, n, r) {
	"use strict";

	function i(t, e) {
		for (var n = 0; n < e.length; n++) {
			var r = e[n];
			r.enumerable = r.enumerable || !1, r.configurable = !0, "value" in r && (r.writable = !0), Object.defineProperty(t, r.key, r)
		}
	}

	function o(t, e, n) { return e && i(t.prototype, e), n && i(t, n), t }

	function s(t, e) { t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e }
	var u = { Valid: "valid", Invalid: "invalid", Pending: "pending", Disabled: "disabled" },
		a = ["untouched", "touched", "pristine", "dirty", "pending", "enabled", "disabled", "valid", "invalid"],
		c = function(t) {
			function r() { return t.apply(this, arguments) || this } s(r, t);
			var i = r.prototype;
			return i.getFormRef = function(t) { return console.log("formFieldDirective", (this.formFieldName ? this.formFieldName : this.formField, "parentFormRef " + t)), this.formFieldName ? t.get(this.formFieldName) : this.formField }, i.onChanges = function(t) {
				var r = e.getContext(this).node,
					i = this.getFormRef(t.formRef);
				console.log(i), this.formRef = i, i.status$.pipe(n.takeUntil(this.unsubscribe$)).subscribe((function(t) { a.forEach((function(t) { i[t] ? r.classList.add(t) : r.classList.remove(t) })) }))
			}, r
		}(e.Component);
	c.meta = { selector: "[[formField]],[[formFieldName]],[formFieldName]", inputs: ["formField", "formFieldName"] };
	var h = function(t) {
		function r() { return t.apply(this, arguments) || this } s(r, t);
		var i = r.prototype;
		return i.getFormRef = function(t) { return this.formControlName ? t.get(this.formControlName) : this.formControl }, i.onInit = function() {
			var t = e.getContext(this).node;
			this.node = t, this.onChange = this.onChange.bind(this), this.onBlur = this.onBlur.bind(this), t.addEventListener("input", this.onChange), t.addEventListener("change", this.onChange), t.addEventListener("blur", this.onBlur)
		}, i.onChanges = function(t) {
			var r = e.getContext(this).node,
				i = this.getFormRef(t.formRef);
			this.formRef = i, i.value$.pipe(n.takeUntil(this.unsubscribe$)).subscribe((function(t) {})), i.status$.pipe(n.takeUntil(this.unsubscribe$)).subscribe((function(t) { a.forEach((function(t) { i[t] ? r.classList.add(t) : r.classList.remove(t) })) })), this.writeValue(i.value)
		}, i.writeValue = function(t) { e.getContext(this).node.setAttribute("value", null == t ? "" : t) }, i.setDisabledState = function(t) { e.getContext(this).node.setAttribute("disabled", t) }, i.onChange = function(t) {
			var n = e.getContext(this).node;
			this.formRef.value = n.value
		}, i.onFocus = function(t) {}, i.onBlur = function(t) { this.formRef.touched = !0 }, i.getPre = function(t) { var e = t.previousSibling; return e && 3 === e.nodeType || (e = document.createTextNode(""), t.parentNode.insertBefore(e, t)), e }, r
	}(e.Directive);
	h.meta = { selector: "input,textarea,select", inputs: ["formControl", "formControlName"] };
	var l = function(t) {
		function e() { return t.apply(this, arguments) || this } s(e, t);
		var n = e.prototype;
		return n.getFormRef = function(t) { return console.log("FormGroupAccessor", (this.formGroupName ? this.formGroupName : this.formGroup, "parentFormRef " + t)), this.formGroupName ? t.get(this.formGroupName) : this.formGroup }, n.onChanges = function(t) {
			var e = this.getFormRef(t.formRef);
			this.formRef = e
		}, e
	}(e.Component);
	l.meta = { selector: "[[formGroup]],[[formGroupName]],[formGroupName]", inputs: ["formGroup", "formGroupName"] };
	var f = function(t) {
		function i() { return t.apply(this, arguments) || this }
		return s(i, t), i.prototype.onInit = function() {
			var t = e.getContext(this),
				i = t.module,
				o = t.node,
				s = t.selector,
				u = t.parentInstance,
				a = this.event = s.replace(/\[|\]|\(|\)/g, ""),
				c = this.event$ = r.fromEvent(o, a).pipe(n.tap((function(t) { t.preventDefault() })), n.shareReplay(1)),
				h = o.getAttribute("(" + a + ")");
			if (h) {
				var l = i.makeFunction(h, ["$event"]);
				c.pipe(n.takeUntil(this.unsubscribe$)).subscribe((function(t) { i.resolve(l, u, t) }))
			} else u[a + "$"] = c
		}, i
	}(e.Directive);
	f.meta = { selector: "[(" + ["submit"].join(")],[(") + ")]" };
	var p = function(t) {
			function e() { return t.apply(this, arguments) || this }
			return s(e, t), e
		}(e.Module),
		d = [h, l, c, f],
		v = [];
	p.meta = { declarations: [].concat(d, v), exports: [].concat(d, v) };
	var m = function() {
			function t(t) { void 0 === t && (t = []), this.validators = t, this.errors = [] }
			var e = t.prototype;
			return e.initSubjects_ = function() { this.valueSubject = new r.BehaviorSubject(null), this.valueChildren = new r.Subject, this.statusSubject = new r.BehaviorSubject(this), this.statusChildren = new r.Subject }, e.initObservables_ = function() {
				var t = this;
				this.value$ = r.merge(this.valueSubject, this.valueChildren).pipe(n.distinctUntilChanged(), n.skip(1), n.tap((function(e) { t.dirty_ = !0, e === t.value && t.statusSubject.next(t) })), n.shareReplay(1)), this.status$ = r.merge(this.statusSubject, this.statusChildren).pipe(n.tap((function(e) { t.reduceValidators_() })), n.shareReplay(1))
			}, e.reduceValidators_ = function() { return this.validate(this.value) }, e.validate = function(t) { return this.status === u.Disabled ? this.errors = [] : (this.errors = this.validators.map((function(e) { return e(t) })).filter((function(t) { return null !== t })), this.status = 0 === this.errors.length ? u.Valid : u.Invalid), this.errors }, o(t, [{ key: "valid", get: function() { return this.status === u.Valid } }, { key: "invalid", get: function() { return this.status === u.Invalid } }, { key: "pending", get: function() { return this.status === u.Pending } }, { key: "disabled", get: function() { return this.status === u.Disabled } }, { key: "enabled", get: function() { return this.status !== u.Disabled } }, { key: "dirty", get: function() { return this.dirty_ } }, { key: "pristine", get: function() { return !this.dirty_ } }, { key: "touched", get: function() { return this.touched_ }, set: function(t) { this.touched_ = t, this.statusSubject.next(this) } }, { key: "untouched", get: function() { return !this.touched_ } }, { key: "value", get: function() { return this.value_ }, set: function(t) { this.value_ = t, this.valueSubject.next(t) } }]), t
		}(),
		b = function(t) {
			function e(e, n) { var r; return void 0 === e && (e = null), (r = t.call(this, n) || this).value_ = e, r.initSubjects_(), r.initObservables_(), r.statusSubject.next(function(t) { if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return t }(r)), r }
			return s(e, t), e
		}(m),
		g = function(t) {
			function e(e, n) { var r; return (r = t.call(this, n) || this).controls = e, r.initControls_(e), r.initSubjects_(), r.initObservables_(), r } s(e, t);
			var i = e.prototype;
			return i.initControl_ = function(t) { return t instanceof m ? t : new b(t, this.validators) }, i.initControls_ = function(t) { var e = this; return this.forEach_((function(t, n) { e.set(e.initControl_(t), n) })), t }, i.initSubjects_ = function() {
				var t = this;
				this.valueSubject = new r.BehaviorSubject(null);
				var e = this.reduce_((function(t, e) { return t.push(e.valueSubject), t }), []);
				this.valueChildren = r.combineLatest(e).pipe(n.map((function(e) { return t.value })), n.shareReplay(1)), this.statusSubject = new r.BehaviorSubject(this);
				var i = this.reduce_((function(t, e) { return t.push(e.status$), t }), []);
				this.statusChildren = r.combineLatest(i).pipe(n.shareReplay(1))
			}, i.initObservables_ = function() {
				var t = this;
				this.value$ = r.merge(this.valueSubject, this.valueChildren).pipe(n.distinctUntilChanged(), n.skip(1), n.tap((function(e) { t.dirty_ = !0, e === t.value && t.statusSubject.next(t) })), n.shareReplay(1)), this.status$ = r.merge(this.statusSubject, this.statusChildren).pipe(n.tap((function(e) { t.reduceValidators_() })), n.shareReplay(1))
			}, i.validate = function(t) {
				if (this.status === u.Disabled) this.errors = [];
				else {
					var e = this.validators.map((function(e) { return e(t) })).filter((function(t) { return null !== t }));
					this.errors = this.reduce_((function(t, e) { return t.concat(e.errors) }), e), this.status = 0 === this.errors.length ? u.Valid : u.Invalid
				}
				return this.errors
			}, i.forEach_ = function(t) {
				var e = this;
				Object.keys(this.controls).forEach((function(n) { return t(e.controls[n], n) }))
			}, i.reduce_ = function(t, e) { return this.forEach_((function(n, r) { e = t(e, n, r) })), e }, i.all_ = function(t, e) { return this.reduce_((function(n, r) { return n && r[t] === e }), !0) }, i.any_ = function(t, e) { return this.reduce_((function(n, r) { return n || r[t] === e }), !1) }, i.get = function(t) { return this.controls[t] }, i.set = function(t, e) { this.controls[e] = t }, o(e, [{ key: "touched", get: function() { return this.reduce_((function(t, e) { return t && e.touched }), !0) }, set: function(t) { this.forEach_((function(e) { e.touched = t })), this.statusSubject.next(this) } }, { key: "value", get: function() { return this.reduce_((function(t, e, n) { return t[n] = e.value, t }), {}) }, set: function(t) {} }]), e
		}(m),
		y = function(t) {
			function e(e, n) { return void 0 === e && (e = []), t.call(this, e, n) || this } s(e, t);
			var n = e.prototype;
			return n.forEach_ = function(t) { this.controls.forEach((function(e, n) { return t(e, n) })) }, n.get = function(t) { return this.controls[t] }, n.set = function(t, e) { this.controls.length = Math.max(this.controls.length, e), this.controls[e] = t }, e
		}(g),
		_ = function(t) {
			function e(e, n) { return void 0 === e && (e = {}), t.call(this, e, n) || this } s(e, t);
			var n = e.prototype;
			return n.forEach_ = function(t) {
				var e = this;
				Object.keys(this.controls).forEach((function(n) { return t(e.controls[n], n) }))
			}, n.get = function(t) { return this.controls[t] }, n.set = function(t, e) { this.controls[e] = t }, e
		}(g);
	t.FormAbstract = m, t.FormAbstractCollection = g, t.FormInputDirective = h, t.FormArray = y, t.FormControl = b, t.FormGroup = _, t.FormGroupAccessor = l, t.FormModule = p, t.FormStatus = u, t.RequiredValidator = function(t) { return null == t || 0 === t.length ? "required" : null }, Object.defineProperty(t, "__esModule", { value: !0 })
}));
//# sourceMappingURL=rxcomp-form.min.js.map
