{"version":3,"sources":["dist/rxcomp-form.js","../src/form/models/form-status.js","../src/form/directives/form-abstract-collection.directive.js","../src/form/directives/form-array.directive.js","../src/form/directives/form-abstract.directive.js","../src/form/directives/form-checkbox.directive.js","../src/form/directives/form-field.component.js","../src/form/directives/form-group.directive.js","../src/form/directives/form-input.directive.js","../src/form/directives/form-placeholder.directive.js","../src/form/directives/form-radio.directive.js","../src/form/directives/form-select.directive.js","../src/form/directives/form-submit.directive.js","../src/form/validators/form-validator.js","../src/form/validators/validators.js","../src/form/validators/form-email.directive.js","../src/form/validators/form-max-length.directive.js","../src/form/validators/form-max.directive.js","../src/form/validators/form-min-length.directive.js","../src/form/validators/form-min.directive.js","../src/form/validators/form-pattern.directive.js","../src/form/validators/form-required-true.directive.js","../src/form/validators/form-required.directive.js","../src/form.module.js","../src/form/form-abstract.js","../src/form/form-control.js","../src/form/form-abstract-collection.js","../src/form/form-array.js","../src/form/form-group.js"],"names":["global","factory","exports","module","require","define","amd","self","rxcomp","rxjs","operators","this","_defineProperties","target","props","i","length","descriptor","enumerable","configurable","writable","Object","defineProperty","key","_createClass","Constructor","protoProps","staticProps","prototype","_inheritsLoose","subClass","superClass","create","constructor","__proto__","FormStatus","Pending","Valid","Invalid","Disabled","Hidden","FormAttributes","FormAbstractCollectionDirective","_Directive","apply","arguments","onChanges","changes","node","getContext","control","forEach","x","classList","add","remove","get","Directive","meta","hosts","host","FormArrayDirective","_FormAbstractCollecti","formArray","formArrayName","selector","inputs","FormAbstractDirective","_proto","onInit","onChange","bind","onBlur","addEventListener","formControlName","name","writeValue","value","event","touched","setDisabledState","disabled","formControl","FormCheckboxDirective","_FormAbstractDirectiv","setAttribute","removeAttribute","checked","FormFieldComponent","_Component","formField","formFieldName","Component","FormGroupDirective","formGroup","formGroupName","FormInputDirective","FormPlaceholderDirective","placeholder","FormRadioDirective","FormSelectDirective","FormSubmitDirective","_getContext","parentInstance","replace","event$","fromEvent","pipe","tap","preventDefault","shareReplay","expression","getAttribute","outputFunction","makeFunction","takeUntil","unsubscribe$","subscribe","resolve","FormValidator","validator","params","params$","BehaviorSubject","getValue","set","current","keys","reduce","flag","next","validate","NullValidator","RequiredValidator","required","RequiredTrueValidator","MinValidator","min","parseFloat","isNaN","actual","MaxValidator","max","MinLengthValidator","minlength","requiredLength","actualLength","MaxLengthValidator","maxlength","PatternValidator","pattern","regex","RegExp","charAt","patternToRegEx","test","requiredPattern","toString","actualValue","EmailValidator","email","validators","freeze","FormEmailDirective","addValidators","FormMaxLengthDirective","FormMaxDirective","FormMinLengthDirective","FormMinDirective","FormPatternDirective","FormRequiredTrueDirective","FormRequiredDirective","FormModule","_Module","Module","factories","pipes","declarations","concat","FormAbstract","Array","isArray","initSubjects_","valueSubject","statusSubject","validatorsSubject","switchAll","switchValidators_","map","validators$","combineLatest","of","initObservables_","_this","value$","distinctUntilChanged","skip","submitted_","dirty_","status$","merge","switchMap","validate$","changes$","auditTime","_this2","status","errors","result$","isObservable","results","assign","reset","value_","touched_","patch","_this$validators","push","replaceValidators","_len","_key","clearValidators","hidden","submitted","FormControl","_FormAbstract","call","ReferenceError","_assertThisInitialized","FormAbstractCollection","controls","initControls_","initControl_","_control","forEach_","init","changesChildren","switchSubjects_","reduce_","result","changesChildren$","_this3","filter","callback","_this4","all_","any_","undefined","_this5","find","removeKey","changed","_len2","_key2","FormArray","Math","splice","insert","indexOf","at","FormGroup","Validators"],"mappings":"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","file":"dist/rxcomp-form.min.js","sourcesContent":[null,"const FormStatus = {\n\tPending: 'pending',\n\tValid: 'valid',\n\tInvalid: 'invalid',\n\tDisabled: 'disabled',\n\tHidden: 'hidden',\n};\n\nexport default FormStatus;\n\nexport const FormAttributes = ['untouched', 'touched', 'pristine', 'dirty', 'pending', 'enabled', 'disabled', 'hidden', 'visible', 'valid', 'invalid', 'submitted'];\n","import { Directive, getContext } from 'rxcomp';\nimport { FormAttributes } from '../models/form-status';\n\n/**\n * @desc Abstract class representing a FormAbstractCollectionDirective.\n * @abstract\n * @access public\n */\nexport default class FormAbstractCollectionDirective extends Directive {\n\n\tget control() {\n\t\treturn {};\n\t}\n\n\tonChanges(changes) {\n\t\tconst { node } = getContext(this);\n\t\tconst control = this.control;\n\t\tFormAttributes.forEach(x => {\n\t\t\tif (control[x]) {\n\t\t\t\tnode.classList.add(x);\n\t\t\t} else {\n\t\t\t\tnode.classList.remove(x);\n\t\t\t}\n\t\t});\n\t}\n\n}\n\nFormAbstractCollectionDirective.meta = {\n\t// no selection, abstract class\n\thosts: { host: FormAbstractCollectionDirective },\n};\n","import FormAbstractCollectionDirective from './form-abstract-collection.directive';\n\n/**\n * @desc FormArrayDirective.\n * @example\n * <form [formArray]=\"form\" (submit)=\"onSubmit()\" role=\"form\" novalidate autocomplete=\"off\">\n * \t...\n * </form>\n */\nexport default class FormArrayDirective extends FormAbstractCollectionDirective {\n\n\tget control() {\n\t\t// console.log('FormArrayDirective', (this.formArrayName ? `formArrayName ${this.formArrayName}` : `formArray ${this.formArray}`));\n\t\tif (this.formArray) {\n\t\t\treturn this.formArray;\n\t\t} else {\n\t\t\tif (!this.host) {\n\t\t\t\tthrow ('missing form collection');\n\t\t\t}\n\t\t\treturn this.host.control.get(this.formArrayName);\n\t\t}\n\t}\n\n}\n\nFormArrayDirective.meta = {\n\tselector: '[formArray],[formArrayName]',\n\tinputs: ['formArray', 'formArrayName'],\n\thosts: { host: FormAbstractCollectionDirective },\n};\n","import { Directive, getContext } from 'rxcomp';\nimport { FormAttributes } from '../models/form-status';\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\n\n/**\n * @desc Abstract class representing a FormAbstractDirective.\n * @abstract\n * @access public\n */\nexport default class FormAbstractDirective extends Directive {\n\n\tget control() {\n\t\tif (this.formControl) {\n\t\t\treturn this.formControl;\n\t\t} else {\n\t\t\tif (!this.host) {\n\t\t\t\tthrow ('missing form collection');\n\t\t\t}\n\t\t\treturn this.host.control.get(this.formControlName);\n\t\t}\n\t}\n\n\tonInit() {\n\t\tconst { node } = getContext(this);\n\t\tthis.node = node;\n\t\tthis.onChange = this.onChange.bind(this);\n\t\tthis.onBlur = this.onBlur.bind(this);\n\t\t// this.onFocus = this.onFocus.bind(this);\n\t\tnode.addEventListener('input', this.onChange);\n\t\tnode.addEventListener('change', this.onChange);\n\t\tnode.addEventListener('blur', this.onBlur);\n\t\t// node.addEventListener('focus', this.onFocus);\n\t}\n\n\tonChanges(changes) {\n\t\tconst { node } = getContext(this);\n\t\tif (this.formControlName) {\n\t\t\tnode.name = this.formControlName;\n\t\t}\n\t\tconst control = this.control;\n\t\t/*\n\t\t// remove all invalids then\n\t\tObject.keys(control.errors).forEach(key => {\n\t\t\tnode.classList.add(`invalid-${key}`);\n\t\t});\n\t\t*/\n\t\tFormAttributes.forEach(x => {\n\t\t\tif (control[x]) {\n\t\t\t\tnode.classList.add(x);\n\t\t\t} else {\n\t\t\t\tnode.classList.remove(x);\n\t\t\t}\n\t\t});\n\t\tthis.writeValue(control.value);\n\t}\n\n\twriteValue(value) {\n\t\tconst { node } = getContext(this);\n\t\t// node.setAttribute('value', value == null ? '' : value);\n\t\tnode.value = value == null ? '' : value;\n\t}\n\n\tonChange(event) {\n\t\tconst { node } = getContext(this);\n\t\tthis.control.value = node.value === '' ? null : node.value;\n\t}\n\n\tonBlur(event) {\n\t\tthis.control.touched = true;\n\t}\n\n\t// onFocus(event) {}\n\n\tsetDisabledState(disabled) {\n\t\tconst { node } = getContext(this);\n\t\tnode.disabled = disabled;\n\t\t// node.setAttribute('disabled', disabled);\n\t}\n\n}\n\nFormAbstractDirective.meta = {\n\t// no selection, abstract class\n\tinputs: ['formControl', 'formControlName', 'value'],\n\thosts: { host: FormAbstractCollectionDirective },\n};\n\n/*\n\nLEGACY\nbutton: \t\tA push button with no default behavior.\ncheckbox: \t\tA check box allowing single values to be selected/deselected.\nfile: \t\t\tA control that lets the user select a file. Use the accept attribute to define the types of files that the control can select.\nhidden: \t\tA control that is not displayed but whose value is submitted to the server.\nimage: \t\t\tA graphical submit button. You must use the src attribute to define the source of the image and the alt attribute to define alternative text. You can use the height and width attributes to define the size of the image in pixels.\npassword: \t\tA single-line text field whose value is obscured. Use the maxlength and minlength attributes to specify the maximum length of the value that can be entered.\n\t\t\t\tNote: Any forms involving sensitive information like passwords (e.g. login forms) should be served over HTTPS;\n\t\t\t\tFirefox now implements multiple mechanisms to warn against insecure login forms — see Insecure passwords.\n\t\t\t\tOther browsers are also implementing similar mechanisms.\n\nradio: \t\t\tA radio button, allowing a single value to be selected out of multiple choices.\nreset: \t\t\tA button that resets the contents of the form to default values.\nsubmit: \t\tA button that submits the form.\ntext: \t\t\tA single-line text field. Line-breaks are automatically removed from the input value.\n\n*/\n\n/*\n\nHTML5\ncolor: \t\t\t(ie) A control for specifying a color. A color picker's UI has no required features other than accepting simple colors as text (more info).\ndate: \t\t\t(ie) A control for entering a date (year, month, and day, with no time).\ndatetime-local: (ie) A control for entering a date and time, with no time zone.\nemail: \t\t\tA field for editing an e-mail address.\nmonth: \t\t\t(ie) A control for entering a month and year, with no time zone.\nnumber: \t\tA control for entering a number.\nrange: \t\t\tA control for entering a number whose exact value is not important.\nsearch: \t\tA single-line text field for entering search strings. Line-breaks are automatically removed from the input value.\ntel: \t\t\tA control for entering a telephone number.\ntime: \t\t\t(ie) A control for entering a time value with no time zone.\nurl: \t\t\tA field for entering a URL.\nweek: \t\t\t(ie) A control for entering a date consisting of a week-year number and a week number with no time zone.\n\n*/\n\n/*\n\nATTRIBUTES\nautocomplete\tA string indicating the type of autocomplete functionality, if any, to allow on the input\nautofocus\t\tA Boolean which, if present, makes the input take focus when the form is presented\ndisabled\t\tA Boolean attribute which is present if the input should be disabled\nform\t\t\tThe id of the <form> of which the input is a member; if absent, the input is a member of the nearest containing form, or is not a member of a form at all\nlist\t\t\tThe id of a <datalist> element that provides a list of suggested values for the input\nname\t\t\tThe input's name, to identify the input in the data submitted with the form's data\nreadonly\t\tA Boolean attribute which, if true, indicates that the input cannot be edited\nrequired\t\tA Boolean which, if true, indicates that the input must have a value before the form can be submitted\ntabindex\t\tA numeric value providing guidance to the user agent as to the order in which controls receive focus when the user presses the Tab key\ntype\t\t\tA string indicating which input type the <input> element represents\nvalue\t\t\tThe input's current value\n\n*/\n","import { getContext } from 'rxcomp';\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\nimport FormAbstractDirective from './form-abstract.directive';\n\n/**\n * @desc FormCheckboxDirective.\n * @example\n * <input type=\"checkbox\" formControlName=\"privacy\" [value]=\"true\" requiredTrue />\n * @example\n * <input type=\"checkbox\" [formControl]=\"control\" [value]=\"true\" requiredTrue />\n */\nexport default class FormCheckboxDirective extends FormAbstractDirective {\n\n\tonInit() {\n\t\tconst { node } = getContext(this);\n\t\tthis.node = node;\n\t\t// log(node.getAttributeNode('formControl').value);\n\t\t// log('name', node.name);\n\t\tthis.onChange = this.onChange.bind(this);\n\t\tthis.onBlur = this.onBlur.bind(this);\n\t\t// this.onFocus = this.onFocus.bind(this);\n\t\tnode.addEventListener('input', this.onChange);\n\t\t// node.addEventListener('change', this.onChange);\n\t\tnode.addEventListener('blur', this.onBlur);\n\t\t// node.addEventListener('focus', this.onFocus);\n\t}\n\n\twriteValue(value) {\n\t\tconst { node } = getContext(this);\n\t\tvalue === this.value ? node.setAttribute('checked', value) : node.removeAttribute('checked');\n\t\t/*\n\t\tconst checked = (node.value === value);\n\t\tif (node.checked !== checked) {\n\t\t\tnode.checked = checked;\n\t\t}\n\t\t*/\n\t}\n\n\tsetDisabledState(disabled) {\n\t\tconst { node } = getContext(this);\n\t\tnode.disabled = disabled;\n\t}\n\n\tonChange(event) {\n\t\tconst { node } = getContext(this);\n\t\tthis.control.value = node.checked ? this.value : (this.value === true ? false : null);\n\t}\n\n\tonBlur(event) {\n\t\tthis.control.touched = true;\n\t}\n\n\t// onFocus(event) {}\n\n}\n\nFormCheckboxDirective.meta = {\n\tselector: 'input[type=checkbox][formControl],input[type=checkbox][formControlName]',\n\tinputs: ['formControl', 'formControlName', 'value'],\n\thosts: { host: FormAbstractCollectionDirective },\n};\n\n/*\n\nATTRIBUTES\nautocomplete\tA string indicating the type of autocomplete functionality, if any, to allow on the input\nautofocus\t\tA Boolean which, if present, makes the input take focus when the form is presented\ndisabled\t\tA Boolean attribute which is present if the input should be disabled\nform\t\t\tThe id of the <form> of which the input is a member; if absent, the input is a member of the nearest containing form, or is not a member of a form at all\nlist\t\t\tThe id of a <datalist> element that provides a list of suggested values for the input\nname\t\t\tThe input's name, to identify the input in the data submitted with the form's data\nreadonly\t\tA Boolean attribute which, if true, indicates that the input cannot be edited\nrequired\t\tA Boolean which, if true, indicates that the input must have a value before the form can be submitted\ntabindex\t\tA numeric value providing guidance to the user agent as to the order in which controls receive focus when the user presses the Tab key\ntype\t\t\tA string indicating which input type the <input> element represents\nvalue\t\t\tThe input's current value\n\n*/\n","import { Component, getContext } from \"rxcomp\";\nimport { FormAttributes } from '../models/form-status';\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\n\n/**\n * @desc FormFieldComponent.\n * @example\n * <div formFieldName=\"firstName\">\n *\t<input type=\"text\" [formControl]=\"control\" />\n * </div>\n */\nexport default class FormFieldComponent extends Component {\n\n\tget control() {\n\t\t// console.log('FormFieldComponent', (this.formFieldName ? `formFieldName ${this.formFieldName}` : `formField ${this.formField}`));\n\t\tif (this.formField) {\n\t\t\treturn this.formField;\n\t\t} else {\n\t\t\tif (!this.host) {\n\t\t\t\tthrow ('missing form collection');\n\t\t\t}\n\t\t\treturn this.host.control.get(this.formFieldName);\n\t\t}\n\t}\n\n\tonChanges(changes) {\n\t\tconst { node } = getContext(this);\n\t\tconst control = this.control;\n\t\tFormAttributes.forEach(x => {\n\t\t\tif (control[x]) {\n\t\t\t\tnode.classList.add(x);\n\t\t\t} else {\n\t\t\t\tnode.classList.remove(x);\n\t\t\t}\n\t\t});\n\t}\n\n}\n\nFormFieldComponent.meta = {\n\tselector: '[formField],[formFieldName]',\n\tinputs: ['formField', 'formFieldName'],\n\thosts: { host: FormAbstractCollectionDirective },\n};\n","import FormAbstractCollectionDirective from './form-abstract-collection.directive';\n\n/**\n * @desc FormGroupDirective.\n * @example\n * <form [formGroup]=\"form\" (submit)=\"onSubmit()\" role=\"form\" novalidate autocomplete=\"off\">\n * \t...\n * </form>\n */\nexport default class FormGroupDirective extends FormAbstractCollectionDirective {\n\n\tget control() {\n\t\t// console.log('FormGroupDirective', (this.formGroupName ? `formGroupName ${this.formGroupName}` : `formGroup ${this.formGroup}`));\n\t\tif (this.formGroup) {\n\t\t\treturn this.formGroup;\n\t\t} else {\n\t\t\tif (!this.host) {\n\t\t\t\tthrow ('missing form collection');\n\t\t\t}\n\t\t\treturn this.host.control.get(this.formGroupName);\n\t\t}\n\t}\n\n}\n\nFormGroupDirective.meta = {\n\tselector: '[formGroup],[formGroupName]',\n\tinputs: ['formGroup', 'formGroupName'],\n\thosts: { host: FormAbstractCollectionDirective },\n};\n","import { getContext } from 'rxcomp';\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\nimport FormAbstractDirective from './form-abstract.directive';\n\n/**\n * @desc FormInputDirective to handle input text FormControl value.\n * @example\n * <input type=\"text\" formControlName=\"firstName\" />\n * @example\n * <input type=\"text\" [formControl]=\"form.get('firstName')\" />\n */\nexport default class FormInputDirective extends FormAbstractDirective {\n\n\twriteValue(value) {\n\t\tconst { node } = getContext(this);\n\t\tnode.value = value == null ? '' : value;\n\t}\n\n\tonChange(event) {\n\t\tconst { node } = getContext(this);\n\t\tthis.control.value = node.value === '' ? null : node.value;\n\t}\n\n\tonBlur(event) {\n\t\tthis.control.touched = true;\n\t}\n\n}\n\nFormInputDirective.meta = {\n\tselector: 'input[type=text][formControl],input[type=text][formControlName],input[type=email][formControl],input[type=email][formControlName],input[type=password][formControl],input[type=password][formControlName],textarea[formControl],textarea[formControlName]',\n\tinputs: ['formControl', 'formControlName'],\n\thosts: { host: FormAbstractCollectionDirective },\n};\n","import { Directive, getContext } from 'rxcomp';\n\n/**\n * @desc FormPlaceholderDirective.\n * @example\n * <input type=\"text\" [placeholder]=\"'item-' + index\" />\n */\nexport default class FormPlaceholderDirective extends Directive {\n\n\tonChanges(changes) {\n\t\tconst { node } = getContext(this);\n\t\tnode.placeholder = this.placeholder;\n\t}\n\n}\n\nFormPlaceholderDirective.meta = {\n\tselector: 'input[placeholder],textarea[placeholder]',\n\tinputs: ['placeholder'],\n};\n","import { getContext } from 'rxcomp';\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\nimport FormAbstractDirective from './form-abstract.directive';\n\n/**\n * @desc FormRadioDirective.\n * @example\n * <input type=\"radio\" [formControl]=\"control\" name=\"radioGroup\" value=\"one\" />\n * <input type=\"radio\" [formControl]=\"control\" name=\"radioGroup\" value=\"two\" />\n * <input type=\"radio\" [formControl]=\"control\" name=\"radioGroup\" value=\"three\" />\n */\nexport default class FormRadioDirective extends FormAbstractDirective {\n\n\tonInit() {\n\t\tconst { node } = getContext(this);\n\t\tthis.node = node;\n\t\t// log(node.getAttributeNode('formControl').value);\n\t\t// log('name', node.name);\n\t\tthis.onChange = this.onChange.bind(this);\n\t\tthis.onBlur = this.onBlur.bind(this);\n\t\t// this.onFocus = this.onFocus.bind(this);\n\t\tnode.addEventListener('input', this.onChange);\n\t\t// node.addEventListener('change', this.onChange);\n\t\tnode.addEventListener('blur', this.onBlur);\n\t\t// node.addEventListener('focus', this.onFocus);\n\t}\n\n\twriteValue(value) {\n\t\tconst { node } = getContext(this);\n\t\tnode.checked = (node.value === value);\n\t}\n\n\tsetDisabledState(disabled) {\n\t\tconst { node } = getContext(this);\n\t\tnode.disabled = disabled;\n\t}\n\n\tonChange(event) {\n\t\tconst { node } = getContext(this);\n\t\tif (node.checked) {\n\t\t\tthis.control.value = node.value;\n\t\t}\n\t}\n\n\tonBlur(event) {\n\t\tthis.control.touched = true;\n\t}\n\n}\n\nFormRadioDirective.meta = {\n\tselector: 'input[type=radio][formControl],input[type=radio][formControlName]',\n\tinputs: ['formControl', 'formControlName'],\n\thosts: { host: FormAbstractCollectionDirective },\n};\n","import { getContext } from 'rxcomp';\nimport FormAbstractCollectionDirective from './form-abstract-collection.directive';\nimport FormAbstractDirective from './form-abstract.directive';\n\n/**\n * @desc FormSelectDirective.\n * @example\n * <select formControlName=\"country\">\n * \t<option value=\"\">select</option>\n * \t<option value=\"en-US\">English</option>\n * \t<option value=\"it-IT\">Italiano</option>\n * </select>\n * @example\n * <select [formControl]=\"control\">\n * \t<option value=\"\">select</option>\n * \t<option value=\"en-US\">English</option>\n * \t<option value=\"it-IT\">Italiano</option>\n * </select>\n */\nexport default class FormSelectDirective extends FormAbstractDirective {\n\n\twriteValue(value) {\n\t\tconst { node } = getContext(this);\n\t\tnode.value = value == null ? '' : value;\n\t}\n\n\tsetDisabledState(disabled) {\n\t\tconst { node } = getContext(this);\n\t\tnode.disabled = disabled;\n\t}\n\n\tonChange(event) {\n\t\tconst { node } = getContext(this);\n\t\tthis.control.value = node.value === '' ? null : node.value;\n\t}\n\n\tonBlur(event) {\n\t\tthis.control.touched = true;\n\t}\n\n}\n\nFormSelectDirective.meta = {\n\tselector: 'select[formControl],select[formControlName]',\n\tinputs: ['formControl', 'formControlName'],\n\thosts: { host: FormAbstractCollectionDirective },\n};\n","import { Directive, getContext } from 'rxcomp';\nimport { fromEvent } from 'rxjs';\nimport { shareReplay, takeUntil, tap } from 'rxjs/operators';\n\n/**\n * @desc FormSubmitDirective.\n * @example\n * <form (submit)=\"onSubmit()\" [formGroup]=\"form\" role=\"form\" novalidate autocomplete=\"off\">\n * \t...\n * </form>\n */\nexport default class FormSubmitDirective extends Directive {\n\n\tonInit() {\n\t\tconst { module, node, selector, parentInstance } = getContext(this);\n\t\tconst event = this.event = selector.replace(/\\[|\\]|\\(|\\)/g, '');\n\t\tconst event$ = this.event$ = fromEvent(node, event).pipe(\n\t\t\ttap(event => {\n\t\t\t\tevent.preventDefault();\n\t\t\t\t// console.log('event');\n\t\t\t}),\n\t\t\tshareReplay(1)\n\t\t);\n\t\tconst expression = node.getAttribute(`(${event})`);\n\t\tif (expression) {\n\t\t\tconst outputFunction = module.makeFunction(expression, ['$event']);\n\t\t\tevent$.pipe(\n\t\t\t\ttakeUntil(this.unsubscribe$)\n\t\t\t).subscribe(event => {\n\t\t\t\tmodule.resolve(outputFunction, parentInstance, event);\n\t\t\t});\n\t\t} else {\n\t\t\tparentInstance[`${event}$`] = event$;\n\t\t}\n\t\t// console.log('parentInstance', parentInstance);\n\t\t// console.log('EventDirective.onInit', 'selector', selector, 'event', event);\n\t}\n\n}\n\nFormSubmitDirective.meta = {\n\tselector: `[(submit)]`,\n};\n","import { BehaviorSubject } from \"rxjs\";\n\n/**\n * @desc FormValidator class representing a form validator.\n * @example\n * export function EqualValidator(equal) {\n * \treturn new FormValidator(function(value) {\n * \t\tconst equal = this.params.equal;\n * \t\tif (!value || !equal) {\n * \t\t\treturn null;\n * \t\t}\n * \t\treturn value !== equal ? { equal: { equal: equal, actual: value } } : null;\n * \t}, { equal });\n * }\n */\nexport default class FormValidator {\n\n\t/**\n\t * params getter\n\t * @return {any} params\n\t */\n\tget params() {\n\t\treturn this.params$.getValue();\n\t}\n\n\t/**\n\t * params setter\n\t * @param {any} params\n\t */\n\tset params(params) {\n\t\tif (params) {\n\t\t\tconst current = this.params;\n\t\t\tconst differs = Object.keys(params).reduce((flag, key) => {\n\t\t\t\treturn flag || !current || current[key] !== params[key];\n\t\t\t}, false);\n\t\t\tif (differs) {\n\t\t\t\t// if (JSON.stringify(params) !== JSON.stringify(this.params)) {\n\t\t\t\tthis.params$.next(params);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Create a FormValidator.\n\t * @abstract\n\t */\n\tconstructor(validator, params) {\n\t\tthis.validator = validator.bind(this);\n\t\tthis.params$ = new BehaviorSubject(params);\n\t}\n\n\t/**\n\t * validate a value\n\t * @param {any} value - the value to validate\n\t * @return {null|FormValidationError}\n\t */\n\tvalidate(value) {\n\t\treturn this.validator(value);\n\t}\n\n}\n","import FormValidator from './form-validator';\n\n/**\n * a null validator\n * @return {null}\n */\nexport function NullValidator() {\n\treturn new FormValidator(function(value) {\n\t\treturn null;\n\t});\n}\n\n/**\n * a required validator\n * @return {null|FormValidationError}\n */\nexport function RequiredValidator() {\n\treturn new FormValidator(function(value) {\n\t\t// console.log('RequiredValidator', value, (value == null || value.length === 0) ? { required: true } : null);\n\t\treturn (value == null || value.length === 0) ? { required: true } : null;\n\t});\n\t// return (value == null || value.length === 0) ? 'required' : null;\n}\n\n/**\n * a required and true validator\n * @return {null|FormValidationError}\n */\nexport function RequiredTrueValidator() {\n\treturn new FormValidator(function(value) {\n\t\t// console.log('RequiredTrueValidator', value, value === true ? null : { required: true });\n\t\treturn value === true ? null : { required: true };\n\t});\n}\n\n/**\n * a min number value validator\n * @return {null|FormValidationError}\n */\nexport function MinValidator(min) {\n\treturn new FormValidator(function(value) {\n\t\tconst min = this.params.min;\n\t\tif (!value || !min) {\n\t\t\treturn null;\n\t\t}\n\t\tvalue = parseFloat(value);\n\t\treturn !isNaN(value) && value < min ? { min: { min: min, actual: value } } : null;\n\t}, { min });\n}\n\n/**\n * a max number value validator\n * @return {null|FormValidationError}\n */\nexport function MaxValidator(max) {\n\treturn new FormValidator(function(value) {\n\t\tconst max = this.params.max;\n\t\tif (!value || !max) {\n\t\t\treturn null;\n\t\t}\n\t\tvalue = parseFloat(value);\n\t\treturn !isNaN(value) && value > max ? { max: { max: max, actual: value } } : null;\n\t}, { max });\n}\n\n/**\n * a min string length validator\n * @return {null|FormValidationError}\n */\nexport function MinLengthValidator(minlength) {\n\treturn new FormValidator(function(value) {\n\t\tconst minlength = this.params.minlength;\n\t\tif (!value || !minlength) {\n\t\t\treturn null;\n\t\t}\n\t\tconst length = value ? value.length : 0;\n\t\treturn length < minlength ? { minlength: { requiredLength: minlength, actualLength: length } } : null;\n\t}, { minlength });\n}\n\n/**\n * a max string length validator\n * @return {null|FormValidationError}\n */\nexport function MaxLengthValidator(maxlength) {\n\treturn new FormValidator(function(value) {\n\t\tconst maxlength = this.params.maxlength;\n\t\tif (!value || !maxlength) {\n\t\t\treturn null;\n\t\t}\n\t\tconst length = value ? value.length : 0;\n\t\treturn length > maxlength ? { minlength: { requiredLength: maxlength, actualLength: length } } : null;\n\t}, { maxlength });\n}\n\n/**\n * a regex pattern validator\n * @return {null|FormValidationError}\n */\nexport function PatternValidator(pattern) {\n\treturn new FormValidator(function(value) {\n\t\tconst pattern = this.params.pattern;\n\t\tif (!value || !pattern) {\n\t\t\treturn null;\n\t\t}\n\t\tconst regex = patternToRegEx(pattern);\n\t\treturn regex.test(value) ? null : { pattern: { requiredPattern: regex.toString(), actualValue: value } };\n\t}, { pattern });\n}\n\n/**\n * an email pattern validator\n * @return {null|FormValidationError}\n */\nexport function EmailValidator(value) {\n\tconst regex = /^(?=.{1,254}$)(?=.{1,64}@)[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+(?:\\.[a-zA-Z0-9!#$%&'*+/=?^_`{|}~-]+)*@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$/;\n\treturn new FormValidator(function(value) {\n\t\tif (!value) {\n\t\t\treturn null;\n\t\t}\n\t\treturn regex.test(value) ? null : { email: true };\n\t});\n}\n\nfunction patternToRegEx(pattern) {\n\tlet regex;\n\tif (pattern instanceof RegExp) {\n\t\tregex = pattern;\n\t} else if (typeof pattern === 'string') {\n\t\tpattern = pattern.charAt(0) === '^' ? pattern : `^${pattern}`;\n\t\tpattern = pattern.charAt(pattern.length - 1) === '$' ? pattern : `${pattern}$`;\n\t\tregex = new RegExp(pattern);\n\t}\n\treturn regex;\n}\n","import { Directive } from 'rxcomp';\nimport FormAbstractDirective from '../directives/form-abstract.directive';\nimport { EmailValidator } from './validators';\n\n/**\n * @desc FormEmailDirective attribute for injecting EmailValidator.\n * @example\n * <input type=\"text\" formControlName=\"email\" email />\n */\nexport default class FormEmailDirective extends Directive {\n\n\tonInit() {\n\t\t// console.log('FormEmailDirective', this.host.control);\n\t\tconst validator = this.validator = EmailValidator();\n\t\tthis.host.control.addValidators(validator);\n\t}\n\n}\n\nFormEmailDirective.meta = {\n\tselector: '[email][formControl],[email][formControlName]',\n\tinputs: ['email'],\n\thosts: { host: FormAbstractDirective },\n};\n","import { Directive } from 'rxcomp';\nimport FormAbstractDirective from '../directives/form-abstract.directive';\nimport { MaxLengthValidator } from './validators';\n// import { EmailValidator, MaxLengthValidator, MaxValidator, MaxLengthValidator, MaxValidator, NullValidator, PatternValidator, RequiredTrueValidator, RequiredValidator } from './form/validators/validators';\n\n/**\n * @desc FormMaxLengthDirective attribute for injecting MaxLengthValidator.\n * @example\n * <input type=\"text\" formControlName=\"card\" maxlength=\"12\" />\n */\nexport default class FormMaxLengthDirective extends Directive {\n\n\tonInit() {\n\t\t// console.log('FormMaxLengthDirective.onInit', this.maxlength);\n\t\tconst validator = this.validator = MaxLengthValidator(this.maxlength);\n\t\tthis.host.control.addValidators(this.validator);\n\t}\n\n\tonChanges(changes) {\n\t\t// console.log('FormMaxLengthDirective.onChanges', this.maxlength);\n\t\tthis.validator.params = { maxlength: this.maxlength };\n\t}\n\n}\n\nFormMaxLengthDirective.meta = {\n\tselector: '[maxlength][formControl],[maxlength][formControlName]',\n\tinputs: ['maxlength'],\n\thosts: { host: FormAbstractDirective },\n};\n","import { Directive } from 'rxcomp';\nimport FormAbstractDirective from '../directives/form-abstract.directive';\nimport { MaxValidator } from './validators';\n\n/**\n * @desc FormMaxDirective attribute for injecting MaxValidator.\n * @example\n * <input type=\"number\" formControlName=\"qty\" max=\"12\" />\n */\nexport default class FormMaxDirective extends Directive {\n\n\tonInit() {\n\t\t// console.log('FormMaxDirective.onInit', this.max);\n\t\tconst validator = this.validator = MaxValidator(this.max);\n\t\tthis.host.control.addValidators(this.validator);\n\t}\n\n\tonChanges(changes) {\n\t\t// console.log('FormMaxDirective.onChanges', this.max);\n\t\tthis.validator.params = { max: this.max };\n\t}\n\n}\n\nFormMaxDirective.meta = {\n\tselector: '[max][formControl],[max][formControlName]',\n\tinputs: ['max'],\n\thosts: { host: FormAbstractDirective },\n};\n","import { Directive } from 'rxcomp';\nimport FormAbstractDirective from '../directives/form-abstract.directive';\nimport { MinLengthValidator } from './validators';\n\n/**\n * @desc FormMinLengthDirective attribute for injecting MinLengthValidator.\n * @example\n * <input type=\"text\" formControlName=\"card\" minlength=\"12\" />\n */\nexport default class FormMinLengthDirective extends Directive {\n\n\tonInit() {\n\t\t// console.log('FormMinLengthDirective.onInit', this.minlength);\n\t\tconst validator = this.validator = MinLengthValidator(this.minlength);\n\t\tthis.host.control.addValidators(this.validator);\n\t}\n\n\tonChanges(changes) {\n\t\t// console.log('FormMinLengthDirective.onChanges', this.minlength);\n\t\tthis.validator.params = { minlength: this.minlength };\n\t}\n\n}\n\nFormMinLengthDirective.meta = {\n\tselector: '[minlength][formControl],[minlength][formControlName]',\n\tinputs: ['minlength'],\n\thosts: { host: FormAbstractDirective },\n};\n","import { Directive } from 'rxcomp';\nimport FormAbstractDirective from '../directives/form-abstract.directive';\nimport { MinValidator } from './validators';\n\n/**\n * @desc FormMinDirective attribute for injecting MinValidator.\n * @example\n * <input type=\"number\" formControlName=\"qty\" min=\"1\" />\n */\nexport default class FormMinDirective extends Directive {\n\n\tonInit() {\n\t\t// console.log('FormMinDirective.onInit', this.min);\n\t\tconst validator = this.validator = MinValidator(this.min);\n\t\tthis.host.control.addValidators(this.validator);\n\t}\n\n\tonChanges(changes) {\n\t\t// console.log('FormMinDirective.onChanges', this.min);\n\t\tthis.validator.params = { min: this.min };\n\t}\n\n}\n\nFormMinDirective.meta = {\n\tselector: '[min][formControl],[min][formControlName]',\n\tinputs: ['min'],\n\thosts: { host: FormAbstractDirective },\n};\n","import { Directive } from 'rxcomp';\nimport FormAbstractDirective from '../directives/form-abstract.directive';\nimport { PatternValidator } from './validators';\n\n/**\n * @desc FormPatternDirective attribute for injecting PatternValidator.\n * @example\n * <input type=\"text\" formControlName=\"visa\" pattern=\"^4[0-9]{12}(?:[0-9]{3})?$\" />\n */\nexport default class FormPatternDirective extends Directive {\n\n\tonInit() {\n\t\t// console.log('FormPatternDirective.onInit', this.pattern);\n\t\tconst validator = this.validator = PatternValidator(this.pattern);\n\t\tthis.host.control.addValidators(this.validator);\n\t}\n\n\tonChanges(changes) {\n\t\t// console.log('FormPatternDirective.onChanges', this.pattern);\n\t\tthis.validator.params = { pattern: this.pattern };\n\t}\n\n}\n\nFormPatternDirective.meta = {\n\tselector: '[pattern][formControl],[pattern][formControlName]',\n\tinputs: ['pattern'],\n\thosts: { host: FormAbstractDirective },\n};\n","import { Directive } from 'rxcomp';\nimport FormAbstractDirective from '../directives/form-abstract.directive';\nimport { RequiredTrueValidator } from './validators';\n\n/**\n * @desc FormRequiredTrueDirective attribute for injecting RequiredTrueValidator.\n * @example\n * <input type=\"checkbox\" formControlName=\"privacy\" requiredTrue />\n */\nexport default class FormRequiredTrueDirective extends Directive {\n\n\tonInit() {\n\t\t// console.log('FormRequiredTrueDirective', this.host.control);\n\t\tconst validator = this.validator = RequiredTrueValidator();\n\t\tthis.host.control.addValidators(validator);\n\t}\n\n}\n\nFormRequiredTrueDirective.meta = {\n\tselector: '[requiredTrue][formControl],[requiredTrue][formControlName]',\n\tinputs: ['requiredTrue'],\n\thosts: { host: FormAbstractDirective },\n};\n","import { Directive } from 'rxcomp';\nimport FormAbstractDirective from '../directives/form-abstract.directive';\nimport { RequiredValidator } from './validators';\n\n/**\n * @desc FormRequiredDirective attribute for injecting RequiredValidator.\n * @example\n * <input type=\"text\" formControlName=\"firstName\" required />\n */\nexport default class FormRequiredDirective extends Directive {\n\n\tonInit() {\n\t\t// console.log('FormRequiredDirective', this.host.control);\n\t\tconst validator = this.validator = RequiredValidator();\n\t\tthis.host.control.addValidators(validator);\n\t}\n\n}\n\nFormRequiredDirective.meta = {\n\tselector: '[required][formControl],[required][formControlName]',\n\tinputs: ['required'],\n\thosts: { host: FormAbstractDirective },\n};\n","import { Module } from 'rxcomp';\nimport FormArrayDirective from './form/directives/form-array.directive';\nimport FormCheckboxDirective from './form/directives/form-checkbox.directive';\nimport FormFieldComponent from './form/directives/form-field.component';\nimport FormGroupDirective from './form/directives/form-group.directive';\nimport FormInputDirective from './form/directives/form-input.directive';\nimport FormPlaceholderDirective from './form/directives/form-placeholder.directive';\nimport FormRadioDirective from './form/directives/form-radio.directive';\nimport FormSelectDirective from './form/directives/form-select.directive';\nimport FormSubmitDirective from './form/directives/form-submit.directive';\nimport FormEmailDirective from './form/validators/form-email.directive';\nimport FormMaxLengthDirective from './form/validators/form-max-length.directive';\nimport FormMaxDirective from './form/validators/form-max.directive';\nimport FormMinLengthDirective from './form/validators/form-min-length.directive';\nimport FormMinDirective from './form/validators/form-min.directive';\nimport FormPatternDirective from './form/validators/form-pattern.directive';\nimport FormRequiredTrueDirective from './form/validators/form-required-true.directive';\nimport FormRequiredDirective from './form/validators/form-required.directive';\n\n/**\n * @desc FormModule Class.\n * @example\n * export default class AppModule extends Module {}\n *\n * AppModule.meta = {\n *  imports: [\n *   CoreModule,\n *   FormModule\n *  ],\n *  declarations: [\n *   ErrorsComponent\n *  ],\n *  bootstrap: AppComponent,\n * };\n * @extends Module\n */\nexport default class FormModule extends Module {}\nconst factories = [\n\tFormArrayDirective,\n\tFormCheckboxDirective,\n\tFormFieldComponent,\n\tFormGroupDirective,\n\tFormInputDirective,\n\tFormPlaceholderDirective,\n\tFormRadioDirective,\n\tFormSelectDirective,\n\tFormSubmitDirective,\n\tFormEmailDirective,\n\tFormMaxDirective,\n\tFormMaxLengthDirective,\n\tFormMinDirective,\n\tFormMinLengthDirective,\n\tFormPatternDirective,\n\tFormRequiredDirective,\n\tFormRequiredTrueDirective,\n];\nconst pipes = [\n];\nFormModule.meta = {\n\tdeclarations: [\n\t\t...factories,\n\t\t...pipes,\n\t],\n\texports: [\n\t\t...factories,\n\t\t...pipes,\n\t]\n};\n","import { BehaviorSubject, combineLatest, isObservable, merge, of } from \"rxjs\";\nimport { auditTime, distinctUntilChanged, map, shareReplay, skip, switchAll, switchMap, tap } from 'rxjs/operators';\nimport FormStatus from './models/form-status';\n\n/**\n * @desc Abstract class representing a form control.\n * @abstract\n * @access public\n */\nexport default class FormAbstract {\n\t/**\n\t * Create a FormAbstract.\n\t * @param {FormValidator|FormValidator[]} validators - A list of validators.\n\t */\n\tconstructor(validators) {\n\t\tthis.validators = validators ? (Array.isArray(validators) ? validators : [validators]) : [];\n\t}\n\n\t/**\n\t * @private initialize subjects\n\t * @return {void}\n\t */\n\tinitSubjects_() {\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tthis.valueSubject = new BehaviorSubject(null);\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tthis.statusSubject = new BehaviorSubject(this);\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tthis.validatorsSubject = new BehaviorSubject().pipe(\n\t\t\tswitchAll()\n\t\t);\n\t\tthis.switchValidators_();\n\t}\n\n\t/**\n\t * @private\n\t */\n\tswitchValidators_() {\n\t\tconst validators = this.validators.map(x => x.params$);\n\t\tlet validators$ = validators.length ? combineLatest(validators) : of (validators);\n\t\tthis.validatorsSubject.next(validators$);\n\t}\n\n\t/**\n\t * @private initialize observables\n\t * @return {void}\n\t */\n\tinitObservables_() {\n\t\tthis.value$ = this.valueSubject.pipe(\n\t\t\tdistinctUntilChanged(),\n\t\t\tskip(1),\n\t\t\ttap(() => {\n\t\t\t\t/**\n\t\t\t\t * @private\n\t\t\t\t */\n\t\t\t\tthis.submitted_ = false;\n\t\t\t\t/**\n\t\t\t\t * @private\n\t\t\t\t */\n\t\t\t\tthis.dirty_ = true;\n\t\t\t\tthis.statusSubject.next(this);\n\t\t\t}),\n\t\t\tshareReplay(1)\n\t\t);\n\t\tthis.status$ = merge(this.statusSubject, this.validatorsSubject).pipe(\n\t\t\t// auditTime(1),\n\t\t\tswitchMap(() => this.validate$(this.value)),\n\t\t\tshareReplay(1)\n\t\t);\n\t\tthis.changes$ = merge(this.value$, this.status$).pipe(\n\t\t\tmap(() => this.value),\n\t\t\tauditTime(1),\n\t\t\tshareReplay(1)\n\t\t);\n\t}\n\n\t/**\n\t * @param {null | string} value - the inner control value\n\t * @return {Observable<errors>} an object with key, value errors\n\t */\n\tvalidate$(value) {\n\t\tif (this.status === FormStatus.Disabled || this.status === FormStatus.Hidden || this.submitted_ || !this.validators.length) {\n\t\t\tthis.errors = {};\n\t\t\tif (this.status === FormStatus.Invalid) {\n\t\t\t\tthis.status = FormStatus.Valid;\n\t\t\t}\n\t\t\treturn of(this.errors);\n\t\t} else {\n\t\t\treturn combineLatest(this.validators.map(x => {\n\t\t\t\tlet result$ = x.validate(value);\n\t\t\t\treturn isObservable(result$) ? result$ : of (result$);\n\t\t\t})).pipe(\n\t\t\t\tmap(results => {\n\t\t\t\t\tthis.errors = Object.assign({}, ...results);\n\t\t\t\t\tthis.status = Object.keys(this.errors).length === 0 ? FormStatus.Valid : FormStatus.Invalid;\n\t\t\t\t})\n\t\t\t);\n\t\t}\n\t}\n\n\t/**\n\t * @return {boolean} the pending status\n\t */\n\tget pending() { return this.status === FormStatus.Pending; }\n\n\t/**\n\t * @return {boolean} the valid status\n\t */\n\tget valid() { return this.status !== FormStatus.Invalid; }\n\n\t/**\n\t * @return {boolean} the invalid status\n\t */\n\tget invalid() { return this.status === FormStatus.Invalid; }\n\n\t/**\n\t * @return {boolean} the disabled status\n\t */\n\tget disabled() { return this.status === FormStatus.Disabled; }\n\n\t/**\n\t * @return {boolean} the enabled status\n\t */\n\tget enabled() { return this.status !== FormStatus.Disabled; }\n\n\t/**\n\t * @return {boolean} the hidden status\n\t */\n\tget hidden() { return this.status === FormStatus.Hidden; }\n\n\t/**\n\t * @return {boolean} the visible status\n\t */\n\tget visible() { return this.status !== FormStatus.Hidden; }\n\n\t/**\n\t * @return {boolean} the submitted status\n\t */\n\tget submitted() { return this.submitted_; }\n\n\t/**\n\t * @return {boolean} the dirty status\n\t */\n\tget dirty() { return this.dirty_; }\n\n\t/**\n\t * @return {boolean} the pristine status\n\t */\n\tget pristine() { return !this.dirty_; }\n\n\t/**\n\t * @return {boolean} the touched status\n\t */\n\tget touched() { return this.touched_; }\n\n\t/**\n\t * @return {boolean} the untouched status\n\t */\n\tget untouched() { return !this.touched_; }\n\n\t/**\n\t * @param {boolean} disabled - the disabled state\n\t * @return {void}\n\t */\n\tset disabled(disabled) {\n\t\tif (disabled) {\n\t\t\tif (this.status !== FormStatus.Disabled) {\n\t\t\t\tthis.status = FormStatus.Disabled;\n\t\t\t\t// this.value_ = null;\n\t\t\t\tthis.dirty_ = false;\n\t\t\t\tthis.touched_ = false;\n\t\t\t\tthis.submitted_ = false;\n\t\t\t\tthis.statusSubject.next(this);\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.status === FormStatus.Disabled) {\n\t\t\t\tthis.status = FormStatus.Pending;\n\t\t\t\t// this.value_ = null;\n\t\t\t\tthis.dirty_ = false;\n\t\t\t\tthis.touched_ = false;\n\t\t\t\tthis.submitted_ = false;\n\t\t\t\tthis.statusSubject.next(this);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {boolean} hidden - the hidden state\n\t * @return {void}\n\t */\n\tset hidden(hidden) {\n\t\tif (hidden) {\n\t\t\tif (this.status !== FormStatus.Hidden) {\n\t\t\t\tthis.status = FormStatus.Hidden;\n\t\t\t\t// this.value_ = null;\n\t\t\t\tthis.dirty_ = false;\n\t\t\t\tthis.touched_ = false;\n\t\t\t\tthis.submitted_ = false;\n\t\t\t\tthis.statusSubject.next(this);\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.status === FormStatus.Hidden) {\n\t\t\t\tthis.status = FormStatus.Pending;\n\t\t\t\t// this.value_ = null;\n\t\t\t\tthis.dirty_ = false;\n\t\t\t\tthis.touched_ = false;\n\t\t\t\tthis.submitted_ = false;\n\t\t\t\tthis.statusSubject.next(this);\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * @param {boolean} submitted - the submitted state\n\t * @return {void}\n\t */\n\tset submitted(submitted) {\n\t\tthis.submitted_ = submitted;\n\t\tthis.statusSubject.next(this);\n\t}\n\n\t/**\n\t * @param {boolean} touched - the touched state\n\t * @return {void}\n\t */\n\tset touched(touched) {\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tthis.touched_ = touched;\n\t\tthis.statusSubject.next(this);\n\t}\n\n\t/**\n\t * @return {null | string} inner value of the control\n\t */\n\tget value() { return this.value_; }\n\n\t/**\n\t * @param {null | string} value - a value\n\t * @return {void}\n\t */\n\tset value(value) {\n\t\t// console.log('set value', value);\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tthis.value_ = value;\n\t\tthis.valueSubject.next(value);\n\t}\n\n\t/**\n\t * @param {null | FormStatus} status - optional FormStatus\n\t * @return {void}\n\t */\n\treset(status) {\n\t\tthis.status = status || FormStatus.Pending;\n\t\tthis.value_ = null;\n\t\tthis.dirty_ = false;\n\t\tthis.touched_ = false;\n\t\tthis.submitted_ = false;\n\t\tthis.statusSubject.next(this);\n\t}\n\n\t/**\n\t * @param {null | string} value - a value\n\t * @return {void}\n\t */\n\tpatch(value) {\n\t\tthis.value_ = value;\n\t\tthis.dirty_ = true;\n\t\tthis.submitted_ = false;\n\t\tthis.statusSubject.next(this);\n\t}\n\n\t/**\n\t * adds one or more FormValidator.\n\t * @param {...FormValidator[]} validators - A list of validators.\n\t */\n\taddValidators(...validators) {\n\t\tthis.validators.push(...validators);\n\t\tthis.switchValidators_();\n\t}\n\n\t/**\n\t * replace one or more FormValidator.\n\t * @param {...FormValidator[]} validators - A list of validators.\n\t */\n\treplaceValidators(...validators) {\n\t\tthis.validators = validators;\n\t\tthis.switchValidators_();\n\t}\n\n\t/**\n\t * remove all FormValidator.\n\t */\n\tclearValidators() {\n\t\tthis.validators = [];\n\t\tthis.switchValidators_();\n\t}\n\n}\n","import FormAbstract from \"./form-abstract\";\nimport FormStatus from './models/form-status';\n\n/**\n * @desc Class representing a FormControl.\n */\nexport default class FormControl extends FormAbstract {\n\n\t/**\n\t * @desc Create a FormControl.\n\t * @example\n\t * const form = new FormControl(null);\n\t *\n\t * form.changes$.subscribe(changes => {\n\t * \tconsole.log(changes);\n\t * });\n\t * @param {null | string | FormControl} value - The value of the control.\n\t * @param {FormValidator[]} validators - A list of validators.\n\t */\n\tconstructor(value = null, validators) {\n\t\tsuper(validators);\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tthis.value_ = value;\n\t\t/**\n\t\t * @private\n\t\t */\n\t\tthis.status = FormStatus.Pending;\n\t\tthis.errors = {};\n\t\tthis.initSubjects_();\n\t\tthis.initObservables_();\n\t\tthis.statusSubject.next(this);\n\t}\n\n}\n\n/** Shortcut for new FormControl. */\nexport function formControl(value, validators) {\n\treturn new FormControl(value, validators);\n}\n","import { BehaviorSubject, combineLatest, of } from 'rxjs';\nimport { map, shareReplay, switchAll } from 'rxjs/operators';\nimport FormAbstract from './form-abstract';\nimport FormControl from './form-control';\nimport FormStatus from './models/form-status';\n\n/**\n * @desc Abstract class representing a form collection.\n * @abstract\n * @access public\n */\nexport default class FormAbstractCollection extends FormAbstract {\n\t/**\n\t * Create a FormAbstract.\n\t * @param {Map<string, any|FormAbstract>} controls - An object containing controls.\n\t * @param {FormValidator[]} validators - A list of validators.\n\t */\n\tconstructor(controls, validators) {\n\t\tsuper(validators);\n\t\tthis.controls = controls;\n\t\tthis.initControls_(controls);\n\t\tthis.initSubjects_();\n\t\tthis.initObservables_();\n\t}\n\n\t/**\n\t * @private\n\t */\n\tinitControl_(control, key) {\n\t\tcontrol = control instanceof FormAbstract ? control : new FormControl(control);\n\t\tcontrol.addValidators(...this.validators);\n\t\tcontrol.name = key;\n\t\treturn control;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tinitControls_(controls) {\n\t\tthis.forEach_((control, key) => {\n\t\t\tthis.init(control, key);\n\t\t});\n\t\treturn controls;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tinitSubjects_() {\n\t\tthis.changesChildren = new BehaviorSubject().pipe(\n\t\t\tswitchAll()\n\t\t);\n\t\tthis.switchSubjects_();\n\t}\n\n\t/**\n\t * @private\n\t */\n\tswitchSubjects_() {\n\t\tconst changesChildren = this.reduce_((result, control) => {\n\t\t\tresult.push(control.changes$);\n\t\t\treturn result;\n\t\t}, []);\n\t\tlet changesChildren$ = changesChildren.length ? combineLatest(changesChildren) : of (changesChildren);\n\t\tthis.changesChildren.next(changesChildren$);\n\t}\n\n\t/**\n\t * @private\n\t */\n\tinitObservables_() {\n\t\tthis.changes$ = this.changesChildren.pipe(\n\t\t\tmap(() => this.value),\n\t\t\tshareReplay(1)\n\t\t);\n\t}\n\n\tvalidate(value) {\n\t\tif (this.status === FormStatus.Disabled || this.status === FormStatus.Hidden) {\n\t\t\t// this.errors = {};\n\t\t\tthis.errors = [];\n\t\t} else {\n\t\t\t// this.errors = Object.assign({}, ...this.validators.map(x => x(value)));\n\t\t\t// this.status = Object.keys(this.errors).length === 0 ? FormStatus.Valid : FormStatus.Invalid;\n\t\t\tlet errors = this.validators.map(x => x(value)).filter(x => x !== null);\n\t\t\tthis.errors = this.reduce_((result, control) => {\n\t\t\t\treturn result.concat(control.errors);\n\t\t\t}, errors);\n\t\t\tthis.status = this.errors.length === 0 ? FormStatus.Valid : FormStatus.Invalid;\n\t\t}\n\t\treturn this.errors;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tforEach_(callback) {\n\t\tObject.keys(this.controls).forEach(key => callback(this.controls[key], key));\n\t}\n\n\t/**\n\t * @private\n\t */\n\treduce_(callback, result) {\n\t\tthis.forEach_((control, key) => {\n\t\t\tresult = callback(result, control, key);\n\t\t});\n\t\treturn result;\n\t}\n\n\t/**\n\t * @private\n\t */\n\tall_(key, value) {\n\t\treturn this.reduce_((result, control) => {\n\t\t\treturn result && control[key] === value;\n\t\t}, true);\n\t}\n\n\t/**\n\t * @private\n\t */\n\tany_(key, value) {\n\t\treturn this.reduce_((result, control) => {\n\t\t\treturn result || control[key] === value;\n\t\t}, false);\n\t}\n\n\tget valid() { return this.all_('valid', true); }\n\tget invalid() { return this.any_('invalid', true); }\n\tget pending() { return this.any_('pending', true); }\n\tget disabled() { return this.all_('disabled', true); }\n\tget enabled() { return this.any_('enabled', true); }\n\tget hidden() { return this.all_('hidden', true); }\n\tget visible() { return this.any_('visible', true); }\n\tget submitted() { return this.all_('submitted', true); }\n\tget dirty() { return this.any_('dirty', true); }\n\tget pristine() { return this.all_('pristine', true); }\n\tget touched() { return this.all_('touched', true); }\n\tget untouched() { return this.any_('untouched', true); }\n\n\tset disabled(disabled) {\n\t\tthis.forEach_(control => {\n\t\t\tcontrol.disabled = disabled;\n\t\t});\n\t}\n\n\tset hidden(hidden) {\n\t\tthis.forEach_(control => {\n\t\t\tcontrol.hidden = hidden;\n\t\t});\n\t}\n\n\tset submitted(submitted) {\n\t\tthis.forEach_(control => {\n\t\t\tcontrol.submitted = submitted;\n\t\t});\n\t}\n\n\tset touched(touched) {\n\t\tthis.forEach_(control => {\n\t\t\tcontrol.touched = touched;\n\t\t});\n\t}\n\n\tget value() {\n\t\treturn this.reduce_((result, control, key) => {\n\t\t\tresult[key] = control.value;\n\t\t\treturn result;\n\t\t}, {});\n\t}\n\n\tset value(value) {\n\t\tthis.forEach_((control, key) => {\n\t\t\tcontrol.value = value[key];\n\t\t});\n\t}\n\n\tget errors() {\n\t\treturn this.reduce_((result, control) => {\n\t\t\treturn Object.assign(result, control.errors);\n\t\t}, {});\n\t}\n\n\treset() {\n\t\tthis.forEach_(control => control.reset());\n\t}\n\n\tpatch(value) {\n\t\tif (value) {\n\t\t\tthis.forEach_((control, key) => {\n\t\t\t\tif (value[key] != undefined) { // !!! keep != loose inequality\n\t\t\t\t\tcontrol.patch(value[key]);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\t}\n\n\tinit(control, key) {\n\t\tthis.controls[key] = this.initControl_(control, key);\n\t}\n\n\tget(key) {\n\t\treturn this.controls[key];\n\t}\n\n\tset(control, key) {\n\t\tdelete(this.controls[key]);\n\t\tthis.controls[key] = this.initControl_(control, key);\n\t\tthis.switchSubjects_();\n\t}\n\n\t// !!! needed?\n\tadd(control, key) {\n\t\tthis.controls[key] = this.initControl_(control, key);\n\t\tthis.switchSubjects_();\n\t}\n\n\tremove(control) {\n\t\tconst key = Object.keys(this.controls).find(key => this.controls[key] === control ? key : null);\n\t\tif (key) {\n\t\t\tthis.removeKey(key);\n\t\t}\n\t}\n\n\tremoveKey(key) {\n\t\tconst changed = this.controls[key] !== undefined;\n\t\tdelete(this.controls[key]);\n\t\tif (changed) {\n\t\t\tthis.switchSubjects_();\n\t\t}\n\t}\n\n\t/**\n\t * adds one or more FormValidator.\n\t * @param {...FormValidator[]} validators - A list of validators.\n\t */\n\taddValidators(...validators) {\n\t\tthis.forEach_(control => control.addValidators(...validators));\n\t}\n\n\t/**\n\t * replace one or more FormValidator.\n\t * @param {...FormValidator[]} validators - A list of validators.\n\t */\n\treplaceValidators(...validators) {\n\t\tthis.forEach_(control => control.replaceValidators(...validators));\n\t}\n\n\t/**\n\t * remove all FormValidator.\n\t */\n\tclearValidators() {\n\t\tthis.forEach_(control => control.clearValidators());\n\t}\n\n}\n","import FormAbstract from './form-abstract';\nimport FormAbstractCollection from './form-abstract-collection';\n\n/**\n * @desc Class representing a FormArray.\n */\nexport default class FormArray extends FormAbstractCollection {\n\n\t/**\n\t * @desc Create a FormArray.\n\t * @example\n\t * const form = new FormArray([null, null, null]);\n\t *\n\t * form.changes$.subscribe(changes => {\n\t * \tconsole.log(changes);\n\t * });\n\t * @param {any|FormControl[]} controls - An array containing controls.\n\t * @param {FormValidator[]} validators - A list of validators.\n\t */\n\tconstructor(controls = [], validators) {\n\t\tsuper(controls, validators);\n\t}\n\n\t/**\n\t * @private\n\t */\n\tforEach_(callback) {\n\t\tthis.controls.forEach((control, key) => callback(control, key));\n\t}\n\n\t/**\n\t * @return {any[]}\n\t */\n\tget value() {\n\t\treturn this.reduce_((result, control, key) => {\n\t\t\tresult[key] = control.value;\n\t\t\treturn result;\n\t\t}, []); // init as array\n\t}\n\n\t/**\n\t * @return {number}\n\t */\n\tget length() {\n\t\treturn this.controls.length;\n\t}\n\n\t/**\n\t * @protected\n\t * @param {FormAbstract} control\n\t * @param {number} key\n\t */\n\tinit(control, key) {\n\t\tthis.controls.length = Math.max(this.controls.length, key);\n\t\tthis.controls[key] = this.initControl_(control, key);\n\t}\n\n\t/**\n\t * @param {FormAbstract} control\n\t * @param {number} key\n\t */\n\tset(control, key) {\n\t\t// this.controls.length = Math.max(this.controls.length, key);\n\t\t// this.controls[key] = this.initControl_(control);\n\t\tthis.controls.splice(key, 1, this.initControl_(control, key));\n\t\tthis.switchSubjects_();\n\t}\n\n\t// !!! needed?\n\t/**\n\t * @param {FormAbstract} control\n\t * @param {number} key\n\t */\n\tadd(control, key) {\n\t\tthis.controls.length = Math.max(this.controls.length, key);\n\t\tthis.controls[key] = this.initControl_(control, key);\n\t\tthis.switchSubjects_();\n\t}\n\n\t/**\n\t * @param {FormAbstract} control\n\t */\n\tpush(control) {\n\t\t// this.controls.length = Math.max(this.controls.length, key);\n\t\t// this.controls[key] = this.initControl_(control);\n\t\tthis.controls.push(this.initControl_(control, this.controls.length));\n\t\tthis.switchSubjects_();\n\t}\n\n\t/**\n\t * @param {FormAbstract} control\n\t * @param {number} key\n\t */\n\tinsert(control, key) {\n\t\tthis.controls.splice(key, 0, this.initControl_(control, key));\n\t\tthis.switchSubjects_();\n\t}\n\n\t/**\n\t * @param {FormAbstract} control\n\t */\n\tremove(control) {\n\t\tconst key = this.controls.indexOf(control);\n\t\tif (key !== -1) {\n\t\t\tthis.removeKey(key);\n\t\t}\n\t}\n\n\t/**\n\t * @param {number} key\n\t */\n\tremoveKey(key) {\n\t\tif (this.controls.length > key) {\n\t\t\tthis.controls.splice(key, 1);\n\t\t\tthis.switchSubjects_();\n\t\t}\n\t}\n\n\t/**\n\t * @param {number} key\n\t */\n\tat(key) {\n\t\treturn this.controls[key];\n\t}\n\n}\n\n/**\n * @desc Shortcut for new FormArray\n * @param {any|FormControl[]} controls\n * @param {FormValidator[]} validators\n */\nexport function formArray(controls, validators) {\n\treturn new FormArray(controls, validators);\n}\n","import FormAbstractCollection from './form-abstract-collection';\n\n/**\n * @desc Class representing a FormGroup.\n */\nexport default class FormGroup extends FormAbstractCollection {\n\n\t/**\n\t * @desc Create a FormControl.\n\t * @example\n\t * const form = new FormGroup({\n\t * \tfirstName: null,\n\t *  lastName: null,\n\t * });\n\t *\n\t * form.changes$.subscribe(changes => {\n\t * \tconsole.log(changes);\n\t * });\n\t * @param {Map<string, any|FormAbstract>} controls - An object containing controls.\n\t * @param {FormValidator[]} validators - A list of validators.\n\t */\n\tconstructor(controls = {}, validators) {\n\t\tsuper(controls, validators);\n\t}\n\n}\n\n/**\n * @desc Shortcut for new FormGroup\n * @param {Map<string, any|FormAbstract>} controls\n * @param {FormValidator[]} validators\n */\nexport function formGroup(controls, validators) {\n\treturn new FormGroup(controls, validators);\n}\n"]}